name: Tests
on: [push, pull_request]

jobs:
  Windows:
    name: windows-${{ matrix.os-version }}-${{ matrix.build-config }}-${{ matrix.build-arch }}${{ matrix.build-tool }}
    runs-on: windows-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        os-version: [2019, 2022]
        build-config: [debug, release, relwithdebinfo]
        build-arch: [Win32, x64]
        build-tool: ["", "-T ClangCL"]
        exclude:
        - build-arch: Win32
          build-tool: "-T ClangCL"

    steps:
    - name: Versions
      shell: bash
      run: |
        cmake --version
        git --version

    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure
      shell: bash
      run: |
        mkdir build
        cd build
        cmake -A${{ matrix.build-arch }} ${{ matrix.build-tool }} -DCMAKE_BUILD_TYPE=${{ matrix.build-config }} ..

    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build-config }}

    - name: Tests
      shell: bash
      run: |
        cd build/result/${{ matrix.build-config }}
        ./cage-test-core

    - name: Assets
      shell: bash
      run: |
        cd build/result/${{ matrix.build-config }}
        ./cage-asset-database

    - name: Install
      shell: bash
      run: |
        cd build
        cmake --install . --config ${{ matrix.build-config }} --prefix "C:/cage"
        cd ../sources/test-install
        mkdir build
        cd build
        cmake -A${{ matrix.build-arch }} ${{ matrix.build-tool }} -DCMAKE_BUILD_TYPE=${{ matrix.build-config }} -DCage_DIR="C:/cage/cmake" ..
        cmake --build . --config ${{ matrix.build-config }}


  Ubuntu:
    name: ubuntu-${{ matrix.os-version }}-${{ matrix.build-config }}-${{ matrix.compiler.cc }}
    runs-on: ubuntu-${{ matrix.os-version }}.04
    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
    strategy:
      fail-fast: false
      matrix:
        os-version: [22]
        build-config: [debug, release, relwithdebinfo]
        compiler:
        - {
            cc: gcc-12,
            cxx: g++-12,
            install: gcc-12 g++-12
          }
        - {
            cc: gcc-13,
            cxx: g++-13,
            install: gcc-13 g++-13
          }
        - {
            cc: clang-12,
            cxx: clang++-12,
            install: clang-12
          }
        - {
            cc: clang-13,
            cxx: clang++-13,
            install: clang-13
          }
        - {
            cc: clang-14,
            cxx: clang++-14,
            install: clang-14
          }

    steps:
    - name: Install packages
      run: |
        sudo apt-get update
        sudo apt-get install -y xorg-dev nasm ${{ matrix.compiler.install }}

    - name: Versions
      run: |
        cmake --version
        ${{ matrix.compiler.cc }} --version
        ${{ matrix.compiler.cxx }} --version
        git --version

    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-config }} ..

    - name: Build
      run: |
        cd build
        cmake --build . -- -j3

    - name: Tests
      run: |
        cd build/result/${{ matrix.build-config }}
        ./cage-test-core

    - name: Assets
      run: |
        cd build/result/${{ matrix.build-config }}
        ./cage-asset-database

    - name: Install
      run: |
        cd build
        sudo cmake --install .
        cd ../sources/test-install
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-config }} ..
        cmake --build . -- -j3


  Sanitizers:
    name: sanitizer-${{ matrix.sanitizer.name }}-${{ matrix.build-config }}
    runs-on: ubuntu-latest
    env:
      CFLAGS: ${{ matrix.sanitizer.flags }}
      CXXFLAGS: ${{ matrix.sanitizer.flags }}
      LDFLAGS: ${{ matrix.sanitizer.flags }}
      CC: clang
      CXX: clang++
    strategy:
      fail-fast: false
      matrix:
        build-config: [debug, release]
        sanitizer:
        - {
            name: undefined,
            flags: -fsanitize=undefined -fno-omit-frame-pointer
          }
        - {
            name: address,
            flags: -fsanitize=address -fno-omit-frame-pointer
          }
        - {
            name: thread,
            flags: -fsanitize=thread -fno-omit-frame-pointer
          }

    steps:
    - name: Install packages
      run: |
        sudo apt-get update
        sudo apt-get install -y xorg-dev nasm

    - name: Versions
      run: |
        cmake --version
        clang --version
        clang++ --version
        git --version

    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-config }} ..

    - name: Build
      run: |
        cd build
        cmake --build . --target cage-test-core -- -j3

    - name: Tests
      run: |
        cd build/result/${{ matrix.build-config }}
        ./cage-test-core


  NoProfiler:
    name: no-profiler
    runs-on: ubuntu-latest
    env:
      CC: clang
      CXX: clang++
    strategy:
      fail-fast: false

    steps:
    - name: Install packages
      run: |
        sudo apt-get update
        sudo apt-get install -y xorg-dev nasm

    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=DEBUG -Dcage_profiling_enabled=OFF ..

    - name: Build
      run: |
        cd build
        cmake --build . --target cage-test-core -- -j3

    - name: Tests
      run: |
        cd build/result/debug
        ./cage-test-core


  Valgrind:
    name: valgrind-${{ matrix.options.tool }}
    runs-on: ubuntu-latest
    env:
      CC: gcc-13
      CXX: g++-13
    strategy:
      fail-fast: false
      matrix:
        options:
        - {
            tool: memcheck,
            flags: --exit-on-first-error=yes --error-exitcode=1
          }
        - {
            tool: helgrind,
            flags: # helgrind produces some false-positives so lets not fail on them
          }

    steps:
    - name: Install packages
      run: |
        sudo apt-get update
        sudo apt-get install -y xorg-dev nasm valgrind g++-13

    - uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Configure
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=RELWITHDEBINFO ..

    - name: Build
      run: |
        cd build
        cmake --build . --target cage-test-core -- -j3

    - name: Tests
      run: |
        cd build/result/relwithdebinfo
        valgrind ${{ matrix.options.flags }} --tool=${{ matrix.options.tool }} ./cage-test-core

