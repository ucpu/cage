name: Tests
on: [push, pull_request]

jobs:
  Windows:
    name: windows-${{ matrix.os-version }}-${{ matrix.build-arch }}-${{ matrix.build-config }}${{ matrix.build-tool }}-${{ matrix.steam-sockets }}
    runs-on: windows-${{ matrix.os-version }}
    strategy:
      fail-fast: false
      matrix:
        os-version: [2022, 2025]
        build-arch: [Win32, x64]
        build-config: [debug, release, relwithdebinfo]
        build-tool: ["", "-T ClangCL"]
        steam-sockets: [ON, OFF]
        exclude:
        - build-arch: Win32
          build-tool: "-T ClangCL"
        - build-arch: Win32 # cage_use_steam_sockets causes issues on win32
          steam-sockets: ON
        - build-config: release
          steam-sockets: ON
        - build-config: relwithdebinfo
          steam-sockets: ON

    steps:
    - name: Versions
      shell: bash
      run: |
        cmake --version
        git --version

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Configure
      shell: bash
      run: |
        mkdir build
        cd build
        cmake -A${{ matrix.build-arch }} ${{ matrix.build-tool }} -DCMAKE_BUILD_TYPE=${{ matrix.build-config }} -Dcage_use_steam_sockets=${{ matrix.steam-sockets }} ..

    - name: Build
      shell: bash
      run: |
        cd build
        cmake --build . --config ${{ matrix.build-config }}

    - name: Tests
      shell: bash
      run: |
        cd build/result/${{ matrix.build-config }}
        ./cage-test-core

    - name: Assets
      shell: bash
      run: |
        cd build/result/${{ matrix.build-config }}
        ./cage-asset-database

    - name: Install
      shell: bash
      run: |
        cd build
        cmake --install . --config ${{ matrix.build-config }} --prefix "C:/cage"
        cd ../sources/test-install
        mkdir build
        cd build
        cmake -A${{ matrix.build-arch }} ${{ matrix.build-tool }} -DCMAKE_BUILD_TYPE=${{ matrix.build-config }} -DCage_DIR="C:/cage/cmake" ..
        cmake --build . --config ${{ matrix.build-config }}


  Ubuntu:
    name: ubuntu-${{ matrix.os-version }}${{ matrix.build-arch }}-${{ matrix.build-config }}-${{ matrix.compiler.cc }}-${{ matrix.steam-sockets }}
    runs-on: ubuntu-${{ matrix.os-version }}.04${{ matrix.build-arch }}
    env:
      CC: ${{ matrix.compiler.cc }}
      CXX: ${{ matrix.compiler.cxx }}
    strategy:
      fail-fast: false
      matrix:
        os-version: [24]
        build-arch: ["", "-arm"]
        build-config: [debug, release]
        compiler:
        - {
            cc: gcc-13,
            cxx: g++-13,
            install: gcc-13 g++-13
          }
        - {
            cc: gcc-14,
            cxx: g++-14,
            install: gcc-14 g++-14
          }
        - {
            cc: clang-16,
            cxx: clang++-16,
            install: clang-16
          }
        - {
            cc: clang-18,
            cxx: clang++-18,
            install: clang-18
          }
        steam-sockets: [ON, OFF]
        exclude:
        - build-config: release
          steam-sockets: ON
        - build-arch: "-arm" # temporarily disable all tests on arm - tests with gcc fail at runtiime

    steps:
    - name: Install packages
      run: |
        sudo apt-get update
        sudo apt-get install -y xorg-dev libwayland-dev libxkbcommon-dev libpulse-dev libasound2-dev nasm libssl-dev ${{ matrix.compiler.install }}

    - name: Versions
      run: |
        cmake --version
        git --version
        ${{ matrix.compiler.cc }} --version
        ${{ matrix.compiler.cxx }} --version

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Configure
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-config }} -Dcage_use_steam_sockets=${{ matrix.steam-sockets }} ..

    - name: Build
      run: |
        cd build
        cmake --build . -- -j$(( `nproc` + 1 ))

    - name: Tests
      run: |
        cd build/result/${{ matrix.build-config }}
        ./cage-test-core

    - name: Assets
      run: |
        cd build/result/${{ matrix.build-config }}
        ./cage-asset-database

    - name: Install
      run: |
        cd build
        sudo cmake --install .
        cd ../sources/test-install
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-config }} ..
        cmake --build . -- -j$(( `nproc` + 1 ))

    - name: List dependencies
      run: |
        cd build/result/${{ matrix.build-config }}
        echo "cage-core:"
        ldd libcage-core.so
        echo "cage-engine:"
        ldd libcage-engine.so


  NoProfiler:
    name: no-profiler
    needs: Ubuntu
    runs-on: ubuntu-24.04
    env:
      CC: clang
      CXX: clang++
    strategy:
      fail-fast: false

    steps:
    - name: Install packages
      run: |
        sudo apt-get update
        sudo apt-get install -y xorg-dev libwayland-dev libxkbcommon-dev libpulse-dev libasound2-dev nasm libssl-dev

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Configure
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=DEBUG -Dcage_profiling_enabled=OFF ..

    - name: Build
      run: |
        cd build
        cmake --build . --target cage-test-core -- -j$(( `nproc` + 1 ))

    - name: Tests
      run: |
        cd build/result/debug
        ./cage-test-core


  Sanitizers:
    name: sanitizer-${{ matrix.sanitizer.name }}-${{ matrix.build-config }}
    needs: Ubuntu
    runs-on: ubuntu-24.04
    env:
      CFLAGS: ${{ matrix.sanitizer.flags }}
      CXXFLAGS: ${{ matrix.sanitizer.flags }}
      LDFLAGS: ${{ matrix.sanitizer.flags }}
      CC: clang-16
      CXX: clang++-16
    strategy:
      fail-fast: false
      matrix:
        build-config: [debug, release]
        sanitizer:
        - {
            name: undefined,
            flags: -fsanitize=undefined -fno-omit-frame-pointer
          }
        - {
            name: address,
            flags: -fsanitize=address -fno-omit-frame-pointer
          }
        - {
            name: thread,
            flags: -fsanitize=thread -fno-omit-frame-pointer
          }

    steps:
    - name: Install packages
      run: |
        sudo apt-get update
        sudo apt-get install -y xorg-dev libwayland-dev libxkbcommon-dev libpulse-dev libasound2-dev nasm libssl-dev

    - name: Versions
      run: |
        cmake --version
        clang --version
        clang++ --version
        git --version

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Configure
      run: |
        mkdir build
        cd build
        # WAMR_DISABLE_STACK_OVERFLOW_CHECK: avoid the program stopping on incorrectly detected stack overflow
        cmake -DWAMR_DISABLE_STACK_OVERFLOW_CHECK=1 -DCMAKE_BUILD_TYPE=${{ matrix.build-config }} ..

    - name: Build
      run: |
        cd build
        cmake --build . --target cage-test-core -- -j$(( `nproc` + 1 ))

    - name: Tests
      run: |
        cd build/result/${{ matrix.build-config }}
        ./cage-test-core


  MacOS:
    name: macos-${{ matrix.build-config }}
    runs-on: macos-latest
    env:
      AR: "/opt/homebrew/opt/llvm/bin/llvm-ar"
      RANLIB: "/opt/homebrew/opt/llvm/bin/llvm-ranlib"
      LDFLAGS: "-L/opt/homebrew/opt/llvm/lib"
      CPPFLAGS: "-I/opt/homebrew/opt/llvm/include"
      CC: "/opt/homebrew/opt/llvm/bin/clang"
      CXX: "/opt/homebrew/opt/llvm/bin/clang++"
    strategy:
      fail-fast: false
      matrix:
        build-config: [debug, release]

    steps:
    - name: Install packages
      run: |
        brew install nasm llvm

    - name: Versions
      run: |
        cmake --version
        git --version
        ${CC} --version
        ${CXX} --version

    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Configure
      run: |
        mkdir build
        cd build
        cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-config }} ..

    - name: Build
      run: |
        cd build
        cmake --build . -- -j$(( `sysctl -n hw.ncpu` + 1 ))

    - name: Tests
      run: |
        cd build/result/${{ matrix.build-config }}
        ./cage-test-core
