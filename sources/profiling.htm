<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Cage Profiling Client</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        hr {
            clear: both;
        }

        #status {
            float: left;
        }

        #menu {
            float: right;
        }

        .framesName, .threadName {
            text-align: center;
            padding: 0px;
            margin-top: 3px;
            margin-bottom: 1px;
            font-size: 12px;
        }

        .item rect, rect.item {
            stroke-width: 1;
            stroke: white;
        }

        .item rect {
            width: 100%;
            height: 100%;
        }

        .item:hover rect, rect.item:hover {
            opacity: 40%;
        }

        .item text {
            text-anchor: middle;
            dominant-baseline: middle;
        }

        .current {
            fill: black;
        }
    </style>
</head>
<body>
    <div id="header">
        <span id="status"></span>
        <span id="menu">
            <button id="pauseButton">Pause</button>
        </span>
    </div>
    <hr>
    <div id="frames"></div>
    <hr>
    <div id="tasks"></div>
    <script>
		const threads = {}
		const frames = {}
		const colors = {}
		const zoom = d3.zoom()
		let zoomTrans = null
		let paused = false
		let uniqueCounter = 1
		let startTime = 0
		let endTime = 0
		let filteredDomain = [0, 0]

		d3.select("#pauseButton").on("click", d => paused = !paused)

		function mergeData(incoming) {
			for (const [idx, thr] of Object.entries(incoming.threads)) {
				if (typeof threads[idx] === "undefined") {
					threads[idx] = {
						name: thr.name,
						data: [],
						stor: {}
					}
				}
				const dst = threads[idx]
				thr.events.pop()
				thr.events.forEach(function (d) {
					let t = {}
					t.name = incoming.names[d[0]]
					t.description = d[1]
					t.startTime = d[2]
					t.endTime = d[2] + d[3]
					dst.data.push(t)
					if (d[4]) {
						if (typeof frames[t.name] === "undefined") {
							frames[t.name] = {
								name: t.name,
								data: [],
								stor: {}
							}
						}
						frames[t.name].data.push(t)
					}
				})
			}
		}

		function removeOldData() {
			endTime = d3.max(Object.values(threads), thr => d3.max(thr.data, d => d.endTime))
			startTime = endTime - 3000000;
			for (const thr of Object.values(threads)) {
				thr.data = thr.data.filter(d => d.endTime > startTime)
			}
			for (const frm of Object.values(frames)) {
				frm.data = frm.data.filter(d => d.endTime > startTime)
			}
		}

		function assignColors() {
			let regenerate = false
			for (const thr of Object.values(threads)) {
				thr.data.forEach(function (d) {
					if (typeof colors[d.name] === "undefined") {
						colors[d.name] = null
						regenerate = true
					}
					else
						d.color = colors[d.name]
				})
			}
			if (regenerate) {
				const step = 1.0 / Object.keys(colors).length
				Object.keys(colors).forEach(function (key, index) {
					colors[key] = d3.interpolateSinebow(index * step)
				})
				assignColors()
			}
		}

		function makePrev(data) {
			let prev = null
			data.forEach(function (a) {
				a.prevTime = prev ? prev.endTime : a.startTime
				prev = a
			})
			data.maximum = d3.max(data, d => d.endTime - d.startTime) || 0
		}

		function makeHierarchy(data) {
			data.forEach(function (a) {
				a.parent = null
				data.forEach(function (b) {
					if (b.startTime < a.startTime && b.endTime > a.startTime) {
						if (!a.parent || b.startTime > a.parent.startTime)
							a.parent = b
					}
				})
				a.children = []
			})
			data.forEach(function (a) {
				if (a.parent)
					a.parent.children.push(a)
				a.depth = 1
				let b = a
				while (b.parent) {
					a.depth++
					b = b.parent
				}
			})
			data.depth = d3.max(data, d => d.depth) || 0
		}

		function filterData(thr) {
			let filtered = []
			thr.data.forEach(function (a) {
				if (a.endTime > filteredDomain[0] && a.startTime < filteredDomain[1]) {
					filtered.push(a)
				}
			})
			return filtered
		}

		function sortDivs(parent) {
			let arr = [].slice.call(parent.childNodes)
			arr.sort((a, b) => d3.ascending(a.innerHTML, b.innerHTML))
			arr.forEach(function (d) {
				parent.appendChild(d)
			})
		}

		function framesRedraw(frm) {
			const stor = frm.stor

			function positions(selection) {
				selection
					.attr("x", d => stor.x(d.prevTime))
					.attr("y", d => stor.height - (stor.y(d.startTime) - stor.y(d.endTime)))
					.attr("width", d => stor.x(d.endTime) - stor.x(d.prevTime))
					.attr("height", d => stor.y(d.startTime) - stor.y(d.endTime))
			}

			function filtered(e, d) {
				d3.selectAll(".current").classed("current", false)
				d3.select(e.currentTarget).classed("current", true)
				let c = (d.endTime + d.prevTime) / 2
				let r = d.endTime - d.prevTime
				filteredDomain = [c - r, c + r]
				for (const thr of Object.values(threads)) {
					tasksRedraw(thr)
				}
			}

			if (typeof stor["div"] === "undefined") {
				stor.div = d3.select("#frames").append("div")
				stor.p = stor.div.append("p").classed("framesName", true).text(frm.name)
				stor.svg = stor.div.append("svg").attr("width", "100%")
				stor.x = d3.scaleLinear()
				stor.y = d3.scaleLinear()
				stor.itemsGroup = stor.svg.append("g").classed("items", true)
				stor.axis = stor.svg.append("g").classed("axis", true)
				sortDivs(document.getElementById("frames"))
			}

			makePrev(frm.data)
			stor.width = d3.select("body").node().getBoundingClientRect().width
			stor.height = 50
			stor.svg.attr("height", stor.height)
			stor.x.domain([startTime, endTime]).range([0, stor.width])
			stor.y.domain([0, frm.data.maximum]).range([stor.height, 0])
			stor.axis.call(d3.axisRight().scale(stor.y).ticks(2))

			stor.items = stor.itemsGroup
				.selectAll(".item")
				.data(frm.data, d => d.startTime)
				.join("rect")
				.classed("item", true)
				.attr("fill", d => d.color)
				.call(positions)
			stor.items
				.append("title")
				.text(d => (d.endTime - d.startTime) + " us")
			stor.items
				.on("click", function (e, d) {
					if (paused)
						filtered(e, d)
				})
				.on("mouseover", function (e, d) {
					if (!paused)
						filtered(e, d)
				})

			stor.svg.node()
		}

		function tasksRedraw(thr) {
			const stor = thr.stor
			let filtered = filterData(thr)
			makeHierarchy(filtered)

			function resetAxes() {
				stor.x.domain(filteredDomain).range([0, stor.width].map(d => (zoomTrans ? zoomTrans.applyX(d) : d)))
				stor.y.domain([0, filtered.depth]).range([0, stor.height])
			}

			function positions(selection) {
				selection
					.attr("x", d => stor.x(d.startTime))
					.attr("y", d => stor.y(d.depth - 1))
					.attr("width", d => stor.x(d.endTime) - stor.x(d.startTime))
					.attr("height", d => stor.y(d.depth + 1) - stor.y(d.depth))
			}

			function zoomed(event) {
				zoomTrans = event.transform
				resetAxes()
				stor.items.call(positions)
			}

			if (typeof stor["div"] === "undefined") {
				stor.div = d3.select("#tasks").append("div")
				stor.p = stor.div.append("p").classed("threadName", true).text(thr.name)
				stor.svg = stor.div.append("svg").attr("width", "100%")
				stor.x = d3.scaleLinear()
				stor.y = d3.scaleLinear()
				stor.itemsGroup = stor.svg.append("g").classed("items", true)
				stor.svg.call(zoom.on("zoom." + (uniqueCounter++), zoomed))
				sortDivs(document.getElementById("tasks"))
			}

			stor.width = d3.select("body").node().getBoundingClientRect().width
			stor.height = filtered.depth * 18
			stor.svg.attr("height", stor.height)
			resetAxes()

			stor.items = stor.itemsGroup
				.selectAll(".item")
				.data(filtered, d => d.startTime)
				.join("svg")
				.classed("item", true)
				.call(positions)
			stor.items
				.append("rect")
				.attr("fill", d => d.color)
			stor.items
				.filter(d => stor.x(d.endTime) - stor.x(d.startTime) > 20)
				.append("text")
				.attr("x", "50%")
				.attr("y", "50%")
				.text(d => d.name)
			stor.items
				.filter(d => stor.x(d.endTime) - stor.x(d.startTime) > 1)
				.append("title")
				.text(d => d.name + "\n" + (d.endTime - d.startTime) + " us\n" + d.description)

			stor.svg.node()
		}

		function update(incoming) {
			mergeData(incoming)
			removeOldData()
			assignColors()
			for (const frm of Object.values(frames)) {
				framesRedraw(frm)
			}
		}

		const ws = new WebSocket("ws://localhost:" + (new URLSearchParams(window.location.search)).get("port"))
		ws.addEventListener("open", event => {
			d3.select("#status").text("connected")
			console.log("connected")
		})
		ws.addEventListener("close", event => {
			d3.select("#status").text("disconnected")
			console.log("disconnected")
		})
		ws.onmessage = function (message) {
			if (paused)
				return
			let reader = new FileReader()
			reader.onload = () => {
				if (reader.result) {
					const incoming = JSON.parse(reader.result)
					update(incoming)
				}
			}
			reader.readAsText(message.data)
		}
    </script>
</body>
</html>
