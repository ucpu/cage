#include <array>
#include <vector>

#include "main.h"

#include <cage-core/camera.h>
#include <cage-core/geometry.h>

void test(Real a, Real b);
void test(Rads a, Rads b);
void test(const Quat &a, const Quat &b);
void test(const Vec3 &a, const Vec3 &b);
void test(const Vec4 &a, const Vec4 &b);
void test(const Mat3 &a, const Mat3 &b);
void test(const Mat4 &a, const Mat4 &b);
void test(const Aabb &a, const Aabb &b)
{
	test(a.a, b.a);
	test(a.b, b.b);
}
void test(const Sphere &a, const Sphere &b)
{
	test(a.center, b.center);
	test(a.radius, b.radius);
}

namespace
{
	void testEx(Real a, Real b)
	{
		if (!a.finite() || !b.finite())
		{
			// test without epsilon
			CAGE_TEST(a == b);
		}
		else
			test(a, b);
	}

	void testEx(const Vec3 &a, const Vec3 &b)
	{
		testEx(a[0], b[0]);
		testEx(a[1], b[1]);
		testEx(a[2], b[2]);
	}

	void geometryPoints()
	{
		CAGE_TESTCASE("points");

		CAGE_TEST(intersects(Vec3(1, 2, 3), Vec3(1, 2, 3)));
		CAGE_TEST(!intersects(Vec3(1, 2, 3), Vec3(3, 2, 1)));

		test(distance(Vec3(1, 2, 3), Vec3(1, 2, 3)), 0);
		test(distance(Vec3(1, 2, 3), Vec3(3, 2, 1)), sqrt(8));

		test(distance(Vec2(1, 2), Vec2(1, 2)), 0);
	}

	void geometryLines()
	{
		CAGE_TESTCASE("lines");

		{
			CAGE_TESTCASE("normalization");

			Line l = makeSegment(Vec3(1, 2, 3), Vec3(3, 4, 5));
			CAGE_TEST(!l.isPoint() && l.isSegment() && !l.isRay() && !l.isLine());
			CAGE_TEST(l.normalized());
			test(l.direction, normalize(Vec3(3, 4, 5) - Vec3(1, 2, 3)));

			l = makeRay(Vec3(1, 2, 3), Vec3(3, 4, 5));
			CAGE_TEST(!l.isPoint() && !l.isSegment() && l.isRay() && !l.isLine());
			CAGE_TEST(l.normalized());
			test(l.direction, normalize(Vec3(3, 4, 5) - Vec3(1, 2, 3)));

			l = makeLine(Vec3(1, 2, 3), Vec3(3, 4, 5));
			CAGE_TEST(!l.isPoint() && !l.isSegment() && !l.isRay() && l.isLine());
			CAGE_TEST(l.normalized());
			test(l.direction, normalize(Vec3(3, 4, 5) - Vec3(1, 2, 3)));

			l = Line(Vec3(1, 2, 3), Vec3(3, 4, 5), -5, 5);
			CAGE_TEST(l.valid());
			CAGE_TEST(!l.normalized());

			l = makeRay(Vec3(1, 2, 3), Vec3(1, 2, 3));
			CAGE_TEST(l.isPoint() && l.isSegment() && !l.isRay() && !l.isLine());
			CAGE_TEST(l.normalized());

			l = makeSegment(Vec3(-5, 0, 0), Vec3(5, 0, 0));
			CAGE_TEST(!l.isPoint() && l.isSegment() && !l.isRay() && !l.isLine());
			CAGE_TEST(l.normalized());
			test(l.minimum, 0);
			test(l.maximum, 10);
			test(l.a(), Vec3(-5, 0, 0));
			test(l.b(), Vec3(5, 0, 0));

			l = makeSegment(Vec3(0.1, 0, 16), Vec3(0.1, 0, 12));
			CAGE_TEST(l.normalized());
			test(l.origin, Vec3(0.1, 0, 16));
			test(l.direction, Vec3(0, 0, -1));
			test(l.minimum, 0);
			test(l.maximum, 4);
		}

		{
			CAGE_TESTCASE("distances (segments)");

			const Line a = makeSegment(Vec3(0, -1, 0), Vec3(0, 1, 0));
			const Line b = makeSegment(Vec3(1, -2, 0), Vec3(1, 2, 0));
			const Line c = makeSegment(Vec3(0, 0, 0), Vec3(0, 0, 1));
			const Line d = makeSegment(Vec3(3, -1, 0), Vec3(3, 1, 0));
			test(distance(a, a), 0);
			test(distance(a, b), 1);
			test(distance(b, a), 1);
			test(distance(a, c), 0);
			test(distance(b, c), 1);
			test(distance(a, d), 3);
		}

		{
			CAGE_TESTCASE("distances (lines)");

			test(distance(makeLine(Vec3(), Vec3(0, 0, 1)), makeLine(Vec3(0, 0, 1), Vec3())), 0);
			test(distance(makeLine(Vec3(), Vec3(0, 0, 1)), makeLine(Vec3(), Vec3(0, 1, 0))), 0);
			test(distance(makeLine(Vec3(), Vec3(0, 0, 1)), makeLine(Vec3(1, 0, 1), Vec3(1, 0, 0))), 1);
			test(distance(makeLine(Vec3(), Vec3(0, 0, 1)), makeLine(Vec3(1, 0, 0), Vec3(1, 1, 0))), 1);
		}

		{
			CAGE_TESTCASE("angles");

			const Line a = makeSegment(Vec3(0, -1, 1), Vec3(0, 1, 1));
			const Line b = makeSegment(Vec3(-1, 0, 2), Vec3(1, 0, 2));
			const Line c = makeSegment(Vec3(0, 0, 0), Vec3(1, 1, 1));
			const Line d = makeSegment(Vec3(3, -1, 0), Vec3(3, 1, 0));
			test(angle(a, a), Degs(0));
			test(angle(a, b), Degs(90));
			test(angle(b, a), Degs(90));
			test(angle(a, c), atan2(Real(1), sqrt(2)));
		}

		{
			CAGE_TESTCASE("randomized intersects");

			for (uint32 round = 0; round < 10; round++)
			{
				const Line l = makeLine(randomDirection3() * 10, randomDirection3() * 10);
				CAGE_TEST(intersects(l, l.origin));
				CAGE_TEST(intersects(l, l.origin + l.direction));
				CAGE_TEST(intersects(l, l.origin - l.direction));
				CAGE_TEST(!intersects(l, l.origin + Vec3(1, 0, 0)));
			}
		}

		{
			CAGE_TESTCASE("randomized transformations");

			for (uint32 round = 0; round < 5; round++)
			{
				const Line l = makeLine(randomDirection3() * 10, randomDirection3() * 10);
				const Vec3 p = l.origin + l.direction * (randomChance() + 1);
				CAGE_TEST(intersects(l, p));
				for (uint32 round2 = 0; round2 < 5; round2++)
				{
					const Transform tr = Transform(randomDirection3() * randomChance() * 10, randomDirectionQuat(), randomChance() + 1);
					const Line lt = l * tr;
					const Vec3 pt = p * tr;
					CAGE_TEST(intersects(lt, pt));
				}
			}
		}
	}

	void geometryTriangles()
	{
		CAGE_TESTCASE("triangles");

		{
			CAGE_TESTCASE("basics");

			Triangle t1(Vec3(-1, 0, 0), Vec3(1, 0, 0), Vec3(0, 2, 0));
			const Triangle t2(Vec3(-2, 0, 1), Vec3(2, 0, 1), Vec3(0, 3, 1));
			const Triangle t3(Vec3(-2, 1, -5), Vec3(0, 1, 5), Vec3(2, 1, 0));
			CAGE_TEST(!intersects(t1, t2));
			CAGE_TEST(intersects(t1, t3));
			CAGE_TEST(intersects(t2, t3));
			t1.area();
			t1.center();
			t1.normal();
			t1 *= Mat4(Vec3(1, 2, 3));
			t1 *= Mat4(Vec3(4, 5, 10), Quat(Degs(), Degs(42), Degs()), Vec3(3, 2, 1));
		}

		{
			CAGE_TESTCASE("tests");

			const Triangle t1(Vec3(-1, 0, 0), Vec3(1, 0, 0), Vec3(0, 2, 0));
			test(t1.normal(), -t1.flip().normal());
			CAGE_TEST(!t1.degenerated());
			CAGE_TEST(Triangle(Vec3(1, 2, 3), Vec3(3, 2, 1), Vec3(1, 2, 3)).degenerated()); // two vertices are the same
			CAGE_TEST(Triangle(Vec3(1, 2, 3), Vec3(2, 4, 6), Vec3(3, 6, 9)).degenerated()); // vertices are collinear
		}

		{
			CAGE_TESTCASE("closest point");

			const Triangle tri = Triangle(Vec3(), Vec3(2, 0, 0), Vec3(0, 2, 0));
			test(closestPoint(tri, Vec3()), Vec3());
			test(closestPoint(tri, Vec3(2, 0, 0)), Vec3(2, 0, 0));
			test(closestPoint(tri, Vec3(0, 2, 0)), Vec3(0, 2, 0));
			test(closestPoint(tri, Vec3(1, 1, 0)), Vec3(1, 1, 0));
			test(closestPoint(tri, Vec3(2, 2, 0)), Vec3(1, 1, 0));
			test(closestPoint(tri, Vec3(1.5, 1.5, 0)), Vec3(1, 1, 0));
			test(closestPoint(tri, Vec3(0.5, 0.5, 0)), Vec3(0.5, 0.5, 0));
			test(closestPoint(tri, Vec3(1, 0, 0)), Vec3(1, 0, 0));
			test(closestPoint(tri, Vec3(0, 1, 0)), Vec3(0, 1, 0));
			test(closestPoint(tri, Vec3(5, 0, 0)), Vec3(2, 0, 0));
			test(closestPoint(tri, Vec3(0, 5, 0)), Vec3(0, 2, 0));
			test(closestPoint(tri, Vec3(-5, 0, 0)), Vec3());
			test(closestPoint(tri, Vec3(0, -5, 0)), Vec3());
			test(closestPoint(tri, Vec3(-5, -5, 0)), Vec3());
			test(closestPoint(tri, Vec3(5, -5, 0)), Vec3(2, 0, 0));
			test(closestPoint(tri, Vec3(-5, 5, 0)), Vec3(0, 2, 0));
			test(closestPoint(tri, Vec3(1, -5, 0)), Vec3(1, 0, 0));
			test(closestPoint(tri, Vec3(-5, 1, 0)), Vec3(0, 1, 0));
			test(closestPoint(Vec3(-5, 1, 0), tri), Vec3(0, 1, 0));
		}

		{
			CAGE_TESTCASE("randomized closest point");

			for (uint32 round = 0; round < 10; round++)
			{
				const Transform tr = Transform(randomDirection3() * randomChance() * 10, randomDirectionQuat());
				const Triangle tri = Triangle(Vec3(), Vec3(2, 0, 0), Vec3(0, 2, 0)) * tr;
				const Real z = randomRange(-100, 100);
				test(closestPoint(tri, Vec3() * tr), Vec3() * tr);
				test(closestPoint(tri, Vec3(2, 0, z) * tr), Vec3(2, 0, 0) * tr);
				test(closestPoint(tri, Vec3(0, 2, z) * tr), Vec3(0, 2, 0) * tr);
				test(closestPoint(tri, Vec3(1, 1, z) * tr), Vec3(1, 1, 0) * tr);
				test(closestPoint(tri, Vec3(2, 2, z) * tr), Vec3(1, 1, 0) * tr);
				test(closestPoint(tri, Vec3(1.5, 1.5, z) * tr), Vec3(1, 1, 0) * tr);
				test(closestPoint(tri, Vec3(0.5, 0.5, z) * tr), Vec3(0.5, 0.5, 0) * tr);
				test(closestPoint(tri, Vec3(1, 0, z) * tr), Vec3(1, 0, 0) * tr);
				test(closestPoint(tri, Vec3(0, 1, z) * tr), Vec3(0, 1, 0) * tr);
				test(closestPoint(tri, Vec3(5, 0, z) * tr), Vec3(2, 0, 0) * tr);
				test(closestPoint(tri, Vec3(0, 5, z) * tr), Vec3(0, 2, 0) * tr);
				test(closestPoint(tri, Vec3(-5, 0, z) * tr), Vec3() * tr);
				test(closestPoint(tri, Vec3(0, -5, z) * tr), Vec3() * tr);
				test(closestPoint(tri, Vec3(-5, -5, z) * tr), Vec3() * tr);
				test(closestPoint(tri, Vec3(5, -5, z) * tr), Vec3(2, 0, 0) * tr);
				test(closestPoint(tri, Vec3(-5, 5, z) * tr), Vec3(0, 2, 0) * tr);
				test(closestPoint(tri, Vec3(1, -5, z) * tr), Vec3(1, 0, 0) * tr);
				test(closestPoint(tri, Vec3(-5, 1, z) * tr), Vec3(0, 1, 0) * tr);
			}
		}

		{
			CAGE_TESTCASE("distances (with lines)");

			test(distance(Triangle(Vec3(-2, -2, 0), Vec3(-2, 2, 0), Vec3(2, -2, 0)), makeSegment(Vec3(-1, -1, -2), Vec3(-1, -1, 2))), 0);
			test(distance(Triangle(Vec3(-2, -2, 0), Vec3(-2, 2, 0), Vec3(2, -2, 0)), makeSegment(Vec3(1, 1, -2), Vec3(1, 1, 2))), sqrt(2));
			test(distance(Triangle(Vec3(-2, -2, 0), Vec3(-2, 2, 0), Vec3(2, -2, 0)), makeSegment(Vec3(-5, 0, 1), Vec3(5, 0, 1))), 1);
			test(distance(Triangle(Vec3(-2, -2, 0), Vec3(-2, 2, 0), Vec3(2, -2, 0)), makeSegment(Vec3(-1.5, 0, 1), Vec3(-0.5, 0, 1))), 1);
			test(distance(Triangle(Vec3(-2, -2, 0), Vec3(-2, 2, 0), Vec3(2, -2, 0)), makeSegment(Vec3(-1.5, -6, 3), Vec3(-0.5, -6, 3))), 5);
			test(distance(makeSegment(Vec3(-1.5, -6, 3), Vec3(-0.5, -6, 3)), Triangle(Vec3(-2, -2, 0), Vec3(-2, 2, 0), Vec3(2, -2, 0))), 5);
		}

		{
			CAGE_TESTCASE("distances (with triangles)");

			test(distance(Triangle(Vec3(-2, -2, 0), Vec3(-2, 2, 0), Vec3(2, -2, 0)), Triangle(Vec3(-1, -1, -2), Vec3(-1, -1, 2), Vec3(2, 2, 0))), 0);
			test(distance(Triangle(Vec3(-2, -2, 0), Vec3(-2, 4, 0), Vec3(4, -2, 0)), Triangle(Vec3(-2, -2, 1), Vec3(-2, 4, 1), Vec3(4, -2, 1))), 1);
			test(distance(Triangle(Vec3(-2, -2, 0), Vec3(-2, 4, 0), Vec3(4, -2, 0)), Triangle(Vec3(0, 0, 0.5), Vec3(0, 0, 2), Vec3(0, 1, 2))), 0.5);
			test(distance(Triangle(Vec3(-2, -2, 0), Vec3(-2, 2, 0), Vec3(2, -2, 0)), Triangle(Vec3(1, 1, -2), Vec3(1, 1, 2), Vec3(2, 2, 0))), sqrt(2));
			test(distance(Triangle(Vec3(1, 1, -2), Vec3(1, 1, 2), Vec3(2, 2, 0)), Triangle(Vec3(-2, -2, 0), Vec3(-2, 2, 0), Vec3(2, -2, 0))), sqrt(2));
		}

		{
			CAGE_TESTCASE("intersections (with lines)");

			const Triangle t1(Vec3(-1, 0, 0), Vec3(1, 0, 0), Vec3(0, 2, 0));
			const Triangle t2(Vec3(-2, 0, 1), Vec3(2, 0, 1), Vec3(0, 3, 1));
			const Triangle t3(Vec3(-2, 1, -5), Vec3(0, 1, 5), Vec3(2, 1, 0));
			test(intersection(makeSegment(Vec3(0, 1, -1), Vec3(0, 1, 1)), t1), Vec3(0, 1, 0));
			test(intersection(t1, makeSegment(Vec3(0, 1, -1), Vec3(0, 1, 1))), Vec3(0, 1, 0));
			CAGE_TEST(intersects(makeSegment(Vec3(0, 1, -1), Vec3(0, 1, 1)), t1));
			CAGE_TEST(intersects(t1, makeSegment(Vec3(0, 1, -1), Vec3(0, 1, 1))));
			CAGE_TEST(!intersection(makeSegment(Vec3(5, 1, -1), Vec3(0, 1, 1)), t1).valid());
			CAGE_TEST(!intersects(makeSegment(Vec3(5, 1, -1), Vec3(0, 1, 1)), t1));
			test(intersection(makeSegment(Vec3(2, 5, 0), Vec3(2, -5, 0)), t3), Vec3(2, 1, 0));
			CAGE_TEST(intersects(makeSegment(Vec3(2, 5, 0), Vec3(2, -5, 0)), t3));
			CAGE_TEST(!intersection(makeSegment(Vec3(2, 0, 0), Vec3(2, -5, 0)), t3).valid());
			CAGE_TEST(!intersects(makeSegment(Vec3(2, 0, 0), Vec3(2, -5, 0)), t3));
		}

		{
			CAGE_TESTCASE("intersects (with triangles)");

			const Triangle a = Triangle(Vec3(10.5860138, -0.126804054, -10.5860195), Vec3(15.8790216, -0.190205932, -15.8790274), Vec3(15.8786421, -0.253607780, -15.8786469));
			const Triangle b = Triangle(Vec3(10.5860157, -0.126804069, -10.5860205), Vec3(5.29338837, -3.57627869e-07, -5.29339361), Vec3(5.29300880, -0.0634022281, -5.29301405));
			CAGE_TEST(!intersects(a, b));
			CAGE_TEST(!intersects(b, a));

			const Triangle c = Triangle(Vec3(5.23147297, 5.81014061, -6.23489857), Vec3(7.14238548, 3.17999482, -6.23489857), Vec3(3.96372533, 1.76476419, -9.00968838));
			const Triangle d = Triangle(Vec3(-4.37113897e-07, -0.00000000, -10.0000000), Vec3(3.96372533, 1.76476419, -9.00968838), Vec3(4.33883762, 0.00000000, -9.00968838));
			CAGE_TEST(intersects(c, d));
			CAGE_TEST(intersects(d, c)); // this test requires double precision implementation, otherwise the function returns inconsistent results

			const Triangle e = Triangle(Vec3(-21, -72, 63), Vec3(-78, 99, 40), Vec3(-19, -78, -83));
			const Triangle f = Triangle(Vec3(96, 77, -51), Vec3(-95, -1, -16), Vec3(9, 5, -21));
			CAGE_TEST(intersects(e, f));
			CAGE_TEST(intersects(f, e));
		}

		{
			CAGE_TESTCASE("randomized intersections (with lines)");

			for (uint32 round = 0; round < 10; round++)
			{
				const Transform tr = Transform(randomDirection3() * randomChance() * 10, randomDirectionQuat(), randomChance() * 10 + 1);
				const Line l = makeLine(randomDirection3() * 10, randomDirection3() * 10);
				const Triangle t = Triangle(randomDirection3() * 10, randomDirection3() * 10, randomDirection3() * 10);
				CAGE_TEST(intersects(l * tr, t * tr) == intersects(l, t));
				CAGE_TEST(intersects(l, t * tr) == intersects(l * inverse(tr), t));
				CAGE_TEST(intersects(l * tr, t) == intersects(l, t * inverse(tr)));
			}
		}

		{
			CAGE_TESTCASE("randomized intersections (with triangles)");

			for (uint32 round = 0; round < 10; round++)
			{
				const Transform tr = Transform(randomDirection3() * randomChance() * 10, randomDirectionQuat(), randomChance() * 10 + 1);
				const Triangle t1 = Triangle(randomDirection3() * 10, randomDirection3() * 10, randomDirection3() * 10);
				const Triangle t2 = Triangle(randomDirection3() * 10, randomDirection3() * 10, randomDirection3() * 10);
				CAGE_TEST(intersects(t1 * tr, t2 * tr) == intersects(t1, t2));
				CAGE_TEST(intersects(t1, t2 * tr) == intersects(t1 * inverse(tr), t2));
				CAGE_TEST(intersects(t1 * tr, t2) == intersects(t1, t2 * inverse(tr)));
				CAGE_TEST(intersects(t2, t1) == intersects(t1, t2));
			}
		}
	}

	void geometryPlanes()
	{
		CAGE_TESTCASE("planes");

		{
			CAGE_TESTCASE("origin & normalized");

			for (int i = 0; i < 5; i++)
			{
				const Plane p(randomChance3() * 100, randomDirection3());
				CAGE_TEST(p.normalized());
				test(distance(p, p.origin()), 0); // origin is a point on the Plane
			}

			CAGE_TEST(!Plane(Vec3(), Vec3(1, 1, 0)).normalized());
			CAGE_TEST(Plane(Vec3(), Vec3(1, 1, 0)).normalize().normalized());
		}

		{
			CAGE_TESTCASE("closest point");

			test(closestPoint(Plane(Vec3(13, 42, -5), Vec3(0, 0, 1)), Vec3(123, 456, 1)), Vec3(123, 456, -5));
			test(closestPoint(Vec3(123, 456, 1), Plane(Vec3(13, 42, -5), Vec3(0, 0, 1))), Vec3(123, 456, -5));
			CAGE_TEST_ASSERTED(closestPoint(Plane(Vec3(13, 42, -5), Vec3(0, 0, 2)), Vec3(123, 456, 1)));
		}

		{
			CAGE_TESTCASE("distances (with points)");

			test(distance(Plane(Vec3(13, 42, -5), Vec3(0, 0, 1)), Vec3(123, 456, 1)), 6);
			test(distance(Vec3(123, 456, 1), Plane(Vec3(13, 42, -5), Vec3(0, 0, 1))), 6);
			test(distance(Plane(Vec3(13, 42, -5), Vec3(0, 0, -1)), Vec3(123, 456, 1)), 6);
			test(distance(Plane(Vec3(13, 42, 5), Vec3(0, 0, -1)), Vec3(123, 456, 1)), 4);
			test(distance(Plane(Vec3(13, 42, 5), Vec3(0, 1, 0)), Vec3(123, 40, 541)), 2);
		}

		{
			CAGE_TESTCASE("distances (with segments)");

			test(distance(Plane(Vec3(13, 42, 1), Vec3(0, 0, 1)), makeSegment(Vec3(123, 456, 7), Vec3(890, 123, -4))), 0);
			test(distance(Plane(Vec3(13, 42, 1), Vec3(0, 0, 1)), makeSegment(Vec3(123, 456, 7), Vec3(890, 123, 1))), 0);
			test(distance(Plane(Vec3(13, 42, -5), Vec3(0, 0, 1)), makeSegment(Vec3(123, 456, 1), Vec3(890, 123, 1))), 6);
			test(distance(makeSegment(Vec3(123, 456, 1), Vec3(890, 123, 1)), Plane(Vec3(13, 42, -5), Vec3(0, 0, 1))), 6);
		}

		{
			CAGE_TESTCASE("intersects");

			CAGE_TEST(intersects(Plane(Vec3(13, 42, 1), Vec3(0, 0, 1)), makeSegment(Vec3(123, 456, 7), Vec3(890, 123, -4))));
			CAGE_TEST(intersects(makeSegment(Vec3(123, 456, 7), Vec3(890, 123, -4)), Plane(Vec3(13, 42, 1), Vec3(0, 0, 1))));
			CAGE_TEST(intersects(Plane(Vec3(13, 42, 1), Vec3(0, 0, 1)), makeSegment(Vec3(123, 456, 7), Vec3(890, 123, 1))));
			CAGE_TEST(!intersects(Plane(Vec3(13, 42, -5), Vec3(0, 0, 1)), makeSegment(Vec3(123, 456, 7), Vec3(890, 123, 1))));
		}

		{
			CAGE_TESTCASE("intersections");

			test(intersection(Plane(Vec3(), Vec3(0, 1, 0)), makeLine(Vec3(0, 1, 0), Vec3(0, -1, 0))), Vec3());
			test(intersection(Plane(Vec3(), Vec3(0, 1, 0)), makeLine(Vec3(1, 1, 0), Vec3(1, -1, 0))), Vec3(1, 0, 0));
			test(intersection(makeLine(Vec3(1, 1, 0), Vec3(1, -1, 0)), Plane(Vec3(), Vec3(0, 1, 0))), Vec3(1, 0, 0));
			test(intersection(Plane(Vec3(13, 5, 42), Vec3(0, 1, 0)), makeLine(Vec3(1, 1, 0), Vec3(1, -1, 0))), Vec3(1, 5, 0));
			test(intersection(Plane(Vec3(), Vec3(0, 1, 0)), makeSegment(Vec3(1, 1, 0), Vec3(1, -1, 0))), Vec3(1, 0, 0));
			CAGE_TEST(!intersection(Plane(Vec3(), Vec3(0, 1, 0)), makeSegment(Vec3(1, 1, 0), Vec3(1, 2, 0))).valid());
		}
	}

	namespace
	{
		static const Vec3 aLotOfPoints[] = {
			Vec3(-123.60679, -480.39215, 380.42264),
			Vec3(-128.45445, -457.31595, 378.706),
			Vec3(-127.456116, -444.82605, 379.05948),
			Vec3(-116.66085, -419.80817, 382.48013),
			Vec3(-125.05696, -396.1926, 379.9091),
			Vec3(-124.19941, -375.576, 380.21274),
			Vec3(-123.17378, -354.92783, 380.55087),
			Vec3(-123.673996, -344.03897, 380.39883),
			Vec3(-122.1084, -323.0864, 380.86646),
			Vec3(-127.781906, -306.76324, 378.94412),
			Vec3(-132.24007, -280.76718, 377.36542),
			Vec3(-123.04333, -256.72586, 380.58954),
			Vec3(-120.50345, -245.87126, 381.34186),
			Vec3(-110.78487, -231.79488, 384.22064),
			Vec3(-123.90827, -208.53122, 380.31586),
			Vec3(-123.24159, -198.65858, 380.53082),
			Vec3(-126.49246, -161.96176, 379.40076),
			Vec3(-124.12163, -142.17886, 380.2403),
			Vec3(-121.20243, -122.27005, 381.13483),
			Vec3(-127.0647, -105.79889, 379.19812),
			Vec3(-124.25114, -85.852394, 380.19443),
			Vec3(-121.364075, -65.80171, 381.08698),
			Vec3(-126.6822, -40.059822, 379.33356),
			Vec3(-121.41334, -24.173668, 381.07236),
			Vec3(-117.92885, -7.6731825, 382.1045),
			Vec3(-123.5229, 30.241112, 380.44745),
			Vec3(-121.50819, 47.582054, 381.04428),
			Vec3(-125.18024, 63.724857, 379.86542),
			Vec3(-116.991264, 82.78328, 382.38223),
			Vec3(-123.075325, 108.16669, 380.58008),
			Vec3(-121.36672, 128.00713, 381.08615),
			Vec3(-128.50502, 142.81615, 378.68805),
			Vec3(-119.882744, 167.7903, 381.52573),
			Vec3(-129.4232, 184.53021, 378.3629),
			Vec3(-128.53317, 202.81024, 378.6781),
			Vec3(-124.65486, 219.71748, 380.05145),
			Vec3(-121.74251, 246.3306, 380.97485),
			Vec3(-127.75575, 265.91394, 378.95337),
			Vec3(-117.00698, 279.23306, 382.3776),
			Vec3(-116.83481, 300.51035, 382.42856),
			Vec3(-123.95474, 328.3186, 380.29938),
			Vec3(-128.67903, 342.98102, 378.62643),
			Vec3(-121.594734, 360.61234, 381.01865),
			Vec3(-131.94174, 386.89807, 377.47104),
			Vec3(-122.13798, 403.64682, 380.8577),
			Vec3(-121.4381, 420.84943, 381.06503),
			Vec3(-120.70243, 438.21048, 381.28293),
			Vec3(-119.7327, 455.54227, 381.57016),
			Vec3(-123.60678, 480.39215, 380.42264),
			Vec3(-103.52763, -480.39215, 386.37036),
			Vec3(-104.50548, -461.39636, 386.0807),
			Vec3(-101.13573, -440.56348, 386.94458),
			Vec3(-99.21303, -411.27307, 387.4062),
			Vec3(-107.35742, -396.07513, 385.2359),
			Vec3(-104.395386, -383.887, 386.11328),
			Vec3(-99.08482, -360.81967, 387.43695),
			Vec3(-106.093056, -335.08746, 385.6104),
			Vec3(-105.244606, -325.06482, 385.86176),
			Vec3(-102.83504, -304.9275, 386.53662),
			Vec3(-100.342255, -284.5363, 387.13507),
			Vec3(-99.17305, -274.35754, 387.41577),
			Vec3(-104.27849, -247.9962, 386.14792),
			Vec3(-103.10988, -237.87392, 386.4706),
			Vec3(-106.66342, -201.21352, 385.44147),
			Vec3(-104.244064, -181.35078, 386.1581),
			Vec3(-101.42076, -161.45798, 386.8762),
			Vec3(-107.4953, -145.04877, 385.19504),
			Vec3(-104.664246, -125.21921, 386.03366),
			Vec3(-101.60056, -105.16606, 386.833),
			Vec3(-106.46332, -78.65385, 385.50076),
			Vec3(-101.46386, -61.643044, 386.8658),
			Vec3(-100.527664, -49.95167, 387.09058),
			Vec3(-94.54792, -32.07405, 388.52615),
			Vec3(-102.97336, -14.873847, 386.50342),
			Vec3(-393.67062, -364.71786, -70.15291),
			Vec3(-98.45892, 39.370342, 387.58725),
			Vec3(-100.651794, 49.458103, 387.0608),
			Vec3(-388.33295, -316.0335, -95.35285),
			Vec3(-99.85301, 89.51982, 387.25253),
			Vec3(-106.34055, 107.848015, 385.5371),
			Vec3(-104.7532, 127.0457, 386.00732),
			Vec3(-103.04844, 147.07368, 386.4854),
			Vec3(-103.71829, 168.77213, 386.31384),
			Vec3(-109.430534, 198.74054, 384.62183),
			Vec3(-102.06562, 207.6275, 386.7213),
			Vec3(-100.04396, 220.31061, 387.2067),
			Vec3(-105.78149, 245.21284, 385.7027),
			Vec3(-96.273926, 261.89743, 388.11182),
			Vec3(-91.0072, 278.3096, 389.37622),
			Vec3(-100.804054, 305.19925, 387.0242),
			Vec3(-105.18104, 324.40558, 385.88055),
			Vec3(-101.43409, 341.26685, 386.873),
			Vec3(-105.71702, 359.84882, 385.7218),
			Vec3(-102.81384, 402.78845, 386.54172),
			Vec3(-102.11032, 420.16925, 386.71063),
			Vec3(-101.48955, 437.5733, 386.85962),
			Vec3(-100.24025, 455.04065, 387.15955),
			Vec3(-103.52763, 480.39215, 386.37036),
			Vec3(-83.16472, -480.39215, 391.25903),
			Vec3(-87.63542, -462.60495, 390.1857),
			Vec3(-85.627815, -442.3224, 390.6677),
			Vec3(-81.52953, -421.7331, 391.56213),
			Vec3(77.55121, -473.19504, 392.29947),
			Vec3(-360.1272, 203.38007, 173.7875),
			Vec3(-81.97592, -361.52023, 391.47937),
			Vec3(-89.12536, -336.37555, 389.828),
			Vec3(-80.09123, -332.11334, 391.82867),
			Vec3(-69.35314, -298.84586, 393.81885),
			Vec3(-83.82083, -286.54132, 391.10153),
			Vec3(-82.7775, -276.38715, 391.33084),
			Vec3(-86.41055, -240.19737, 390.47977),
			Vec3(-83.5971, -220.22545, 391.15524),
			Vec3(-80.75, -200.32164, 391.70657),
			Vec3(-87.23338, -184.09323, 390.28226),
			Vec3(-84.54555, -164.32855, 390.92755),
			Vec3(-81.3477, -144.42773, 391.5958),
			Vec3(-86.57592, -118.42438, 390.44006),
			Vec3(-81.86453, -103.11889, 391.5),
			Vec3(-81.042435, -88.8826, 391.65237),
			Vec3(-72.63208, -71.99792, 393.21118),
			Vec3(-86.72563, -50.4078, 390.40417),
			Vec3(-88.8672, -37.368282, 389.88998),
			Vec3(-84.64309, -6.5780373, 390.9041),
			Vec3(-73.26364, 6.1254425, 393.09412),
			Vec3(-80.12868, 31.403828, 391.82172),
			Vec3(-83.56129, 50.32, 391.16382),
			Vec3(-75.6571, 63.878746, 392.65048),
			Vec3(-82.59868, 88.0537, 391.36395),
			Vec3(-81.33191, 107.59042, 391.59875),
			Vec3(-89.25433, 123.106186, 389.79706),
			Vec3(-77.78829, 145.83716, 392.25552),
			Vec3(-87.52166, 169.20113, 390.213),
			Vec3(-86.45965, 188.29497, 390.468),
			Vec3(-83.538635, 198.91711, 391.16925),
			Vec3(-83.28389, 227.29468, 391.23044),
			Vec3(-88.28284, 246.58557, 390.03027),
			Vec3(-76.47147, 260.25958, 392.49954),
			Vec3(-74.59458, 281.125, 392.8474),
			Vec3(-83.54472, 306.68628, 391.16785),
			Vec3(-87.110245, 322.06882, 390.31183),
			Vec3(-82.1128, 341.21375, 391.454),
			Vec3(-87.3434, 366.77814, 390.25586),
			Vec3(-79.911354, 375.65457, 391.862),
			Vec3(-83.378586, 401.99094, 391.2077),
			Vec3(-82.48429, 419.28882, 391.38516),
			Vec3(-81.65575, 436.84177, 391.5387),
			Vec3(-84.57823, 463.4171, 390.91968),
			Vec3(-83.16472, 480.39215, 391.25903),
			Vec3(-62.573753, -480.39215, 395.07535),
			Vec3(-63.408905, -461.75525, 394.9206),
			Vec3(-59.73053, -442.10223, 395.44968),
			Vec3(-63.150864, -416.99493, 394.96838),
			Vec3(-66.47086, -400.60352, 394.35306),
			Vec3(-66.68164, -382.2978, 394.314),
			Vec3(-64.82835, -362.58176, 394.65747),
			Vec3(-63.628326, -343.3518, 394.87988),
			Vec3(-61.999645, -323.78873, 395.15094),
			Vec3(-61.047417, -313.8271, 395.2763),
			Vec3(-65.956535, -278.5831, 394.4484),
			Vec3(-63.26569, -258.91312, 394.94714),
			Vec3(-60.29747, -239.2485, 395.37503),
			Vec3(-66.60982, -222.94371, 394.32733),
			Vec3(-63.80532, -203.12822, 394.84708),
			Vec3(-60.6069, -183.53644, 395.3343),
			Vec3(-65.882065, -157.63649, 394.46222),
			Vec3(-60.896374, -142.09059, 395.29617),
			Vec3(-60.418507, -127.98545, 395.35913),
			Vec3(-52.576775, -113.09671, 396.39148),
			Vec3(-66.33664, -90.45059, 394.37793),
			Vec3(-69.27952, -78.206276, 393.83252),
			Vec3(-65.03607, -45.095104, 394.619),
			Vec3(-61.645695, -25.585812, 395.19757),
			Vec3(-57.97199, -6.0300922, 395.68118),
			Vec3(-64.34737, 10.12865, 394.74667),
			Vec3(-62.80774, 30.275211, 395.032),
			Vec3(-59.514137, 49.710373, 395.47818),
			Vec3(-58.53273, 69.19675, 395.60736),
			Vec3(-64.89663, 88.351715, 394.64484),
			Vec3(-63.986927, 106.25926, 394.81342),
			Vec3(-63.164936, 124.267, 394.9658),
			Vec3(-61.507664, 150.70251, 395.21573),
			Vec3(-70.53579, 173.44745, 393.59967),
			Vec3(-62.78734, 186.41801, 395.03577),
			Vec3(-56.84313, 202.87515, 395.8298),
			Vec3(-66.0926, 226.99217, 394.4232),
			Vec3(-54.06714, 242.67714, 396.1953),
			Vec3(-49.616447, 259.429, 396.78125),
			Vec3(-58.116398, 286.82193, 395.6622),
			Vec3(-63.955025, 305.52658, 394.81934),
			Vec3(-61.10962, 322.26865, 395.2681),
			Vec3(-64.70049, 340.38898, 394.6812),
			Vec3(-71.238335, 367.43222, 393.46948),
			Vec3(-64.63063, 383.7473, 394.69415),
			Vec3(-63.758064, 400.85934, 394.85583),
			Vec3(-53.607193, 423.88242, 396.25583),
			Vec3(-55.467865, 440.67563, 396.01086),
			Vec3(-65.30036, 464.15146, 394.57),
			Vec3(-62.57377, 480.39215, 395.07535),
			Vec3(-41.811367, -480.39215, 397.8088),
			Vec3(-45.84621, -456.72543, 397.2776),
			Vec3(-42.610474, -447.19833, 397.70358),
			Vec3(-45.046192, -420.92755, 397.38293),
			Vec3(-41.676613, -399.2638, 397.8194),
			Vec3(-47.45212, -364.67255, 397.06616),
			Vec3(-263.9874, -324.32574, 300.38803),
			Vec3(-43.705757, -315.6628, 397.5594),
			Vec3(-44.89586, -297.94858, 397.4027),
			Vec3(-40.79307, -278.3762, 397.88892),
			Vec3(-46.22979, -261.899, 397.2271),
			Vec3(-43.21572, -242.37555, 397.6239),
			Vec3(-40.7546, -223.21625, 397.89197),
			Vec3(-44.87684, -195.86053, 397.4052),
			Vec3(-43.036762, -185.98453, 397.64746),
			Vec3(-35.85706, -166.97571, 398.2774),
			Vec3(-29.776798, -152.2676, 398.75592),
			Vec3(-45.533638, -130.04099, 397.31873),
			Vec3(-45.535934, -116.51363, 397.31842),
			Vec3(-45.431297, -84.48633, 397.3322),
			Vec3(-42.846027, -64.78365, 397.67255),
			Vec3(-39.15798, -44.863068, 398.0176),
			Vec3(-44.625183, -28.376883, 397.43832),
			Vec3(-40.908733, -8.46357, 397.87982),
			Vec3(-38.14672, 11.46522, 398.0972),
			Vec3(-45.203568, 27.602158, 397.36218),
			Vec3(-35.109177, 41.479992, 398.33624),
			Vec3(-41.2334, 67.56285, 397.85428),
			Vec3(-39.44382, 87.409454, 397.99512),
			Vec3(-47.1285, 102.31126, 397.10876),
			Vec3(-39.11504, 126.97832, 398.02097),
			Vec3(-51.987038, 149.82272, 396.46912),
			Vec3(-44.61007, 166.99146, 397.4403),
			Vec3(-42.894283, 182.47404, 397.6662),
			Vec3(-38.30149, 209.51431, 398.08502),
			Vec3(-47.265747, 225.82977, 397.09073),
			Vec3(-34.35703, 237.7405, 398.39545),
			Vec3(-32.876865, 263.3326, 398.51193),
			Vec3(-41.373173, 292.02045, 397.8433),
			Vec3(-47.38613, 311.17664, 397.07486),
			Vec3(-41.101986, 327.30457, 397.86462),
			Vec3(-46.529617, 345.78717, 397.18762),
			Vec3(-37.641, 354.18958, 398.13702),
			Vec3(-49.116512, 390.49896, 396.84705),
			Vec3(-47.674843, 407.7747, 397.03687),
			Vec3(-35.129017, 423.35706, 398.3347),
			Vec3(-37.025223, 442.1162, 398.18546),
			Vec3(-47.274685, 466.2579, 397.0895),
			Vec3(-41.811367, 480.39215, 397.8088),
			Vec3(-20.934393, -480.39215, 399.45184),
			Vec3(-20.634024, -460.43365, 399.4597),
			Vec3(-15.0330105, -442.70932, 399.60635),
			Vec3(-25.67743, -417.1507, 399.07852),
			Vec3(-30.902645, -398.8202, 398.6673),
			Vec3(-24.235537, -372.60617, 399.19202),
			Vec3(-21.138666, -362.49667, 399.43573),
			Vec3(-19.988024, -338.7926, 399.4766),
			Vec3(-18.591366, -320.3763, 399.51318),
			Vec3(-26.049025, -302.74976, 399.04932),
			Vec3(-22.474707, -283.6186, 399.3306),
			Vec3(-19.079395, -267.94733, 399.5004),
			Vec3(-24.451094, -235.16046, 399.17508),
			Vec3(-22.085442, -225.48233, 399.36124),
			Vec3(-12.352366, -206.93292, 399.67654),
			Vec3(-8.329792, -191.52956, 399.78192),
			Vec3(-23.414976, -169.10815, 399.2566),
			Vec3(-21.784075, -153.89708, 399.38495),
			Vec3(-23.93955, -122.72309, 399.21533),
			Vec3(-22.161848, -103.53992, 399.35522),
			Vec3(-19.113697, -83.8773, 399.49948),
			Vec3(-25.810608, -67.770905, 399.06805),
			Vec3(-22.283524, -47.99753, 399.34567),
			Vec3(-18.556902, -27.680294, 399.5141),
			Vec3(-23.461288, -11.032158, 399.25293),
			Vec3(-12.724811, 3.2338002, 399.66678),
			Vec3(-19.854242, 19.385178, 399.4801),
			Vec3(-16.163649, 59.404625, 399.57675),
			Vec3(-24.185673, 65.59626, 399.19592),
			Vec3(-22.426811, 85.83391, 399.33438),
			Vec3(-20.962, 105.82878, 399.44965),
			Vec3(-22.782925, 129.54454, 399.30634),
			Vec3(-26.921732, 158.66617, 398.9806),
			Vec3(-18.363354, 171.39067, 399.51917),
			Vec3(-16.830338, 180.47623, 399.5593),
			Vec3(-23.295877, 205.45413, 399.266),
			Vec3(-13.546294, 223.02432, 399.64526),
			Vec3(-8.3793125, 239.83133, 399.78058),
			Vec3(-16.576511, 267.63232, 399.56592),
			Vec3(-21.372082, 287.13486, 399.4174),
			Vec3(-19.276093, 303.72546, 399.49524),
			Vec3(-23.447763, 322.2968, 399.254),
			Vec3(-28.500078, 346.79807, 398.85638),
			Vec3(-17.35807, 366.08676, 399.54547),
			Vec3(-26.08699, 381.36856, 399.0463),
			Vec3(-16.313383, 403.346, 399.5728),
			Vec3(-14.408125, 414.9901, 399.62274),
			Vec3(-20.575603, 443.12146, 399.4612),
			Vec3(-21.000822, 464.88834, 399.4466),
			Vec3(-20.934395, 480.39215, 399.45184),
			Vec3(-0.00003400026, -480.39215, 400),
			Vec3(-5.337348, -456.55212, 399.86023),
			Vec3(-6.4698415, -446.76114, 399.8306),
			Vec3(-0.6531179, -420.85278, 399.9829),
			Vec3(4.391545, -394.52454, 399.885),
			Vec3(-0.87061644, -379.37274, 399.97723),
			Vec3(-0.25371313, -363.25894, 399.99335),
			Vec3(-2.2150545, -342.82712, 399.942),
			Vec3(-1.5195255, -322.79956, 399.9602),
			Vec3(2.6631942, -307.01727, 399.93027),
			Vec3(-5.705065, -280.0913, 399.85062),
			Vec3(-2.0351548, -263.26047, 399.94672),
			Vec3(9.647016, -248.96869, 399.74738),
			Vec3(12.359566, -230.36743, 399.67636),
			Vec3(-2.4084752, -208.05731, 399.93695),
			Vec3(1.3786525, -188.49153, 399.96393),
			Vec3(-3.8997965, -162.11884, 399.8979),
			Vec3(-0.19720198, -142.07504, 399.99484),
			Vec3(2.7281308, -122.49604, 399.92856),
			Vec3(-2.6733384, -105.60363, 399.93),
			Vec3(-1.8865125, -86.946526, 399.9506),
			Vec3(0.76214284, -67.21524, 399.98004),
			Vec3(-4.903952, -51.174435, 399.87158),
			Vec3(-2.7425025, -31.30496, 399.92822),
			Vec3(4.373119, -7.8180118, 399.88553),
			Vec3(-3.458946, 7.654485, 399.90942),
			Vec3(6.681653, 22.109621, 399.82507),
			Vec3(0.20038238, 47.630547, 399.99478),
			Vec3(1.8718321, 67.40889, 399.951),
			Vec3(-5.6284637, 82.810295, 399.8526),
			Vec3(4.969995, 106.69046, 399.86984),
			Vec3(-5.6058097, 130.1052, 399.8532),
			Vec3(-6.079717, 149.06851, 399.84082),
			Vec3(-2.3095639, 159.51724, 399.93954),
			Vec3(1.6950736, 187.93578, 399.95563),
			Vec3(-5.6500096, 205.8568, 399.85205),
			Vec3(6.454313, 217.86383, 399.831),
			Vec3(8.610298, 242.93323, 399.77454),
			Vec3(0.63080347, 272.11935, 399.9835),
			Vec3(-4.506158, 290.09637, 399.88202),
			Vec3(-0.35201144, 306.95105, 399.9908),
			Vec3(-5.994708, 323.3508, 399.84302),
			Vec3(3.891725, 335.87354, 399.8981),
			Vec3(-8.659253, 367.59106, 399.77325),
			Vec3(-9.89612, 386.06204, 399.74088),
			Vec3(5.3718038, 398.07864, 399.85934),
			Vec3(3.4056826, 418.4357, 399.91086),
			Vec3(-4.1527963, 446.80905, 399.8913),
			Vec3(-10.208074, 465.53992, 399.7327),
			Vec3(-0.00003400026, 480.39215, 400),
			Vec3(20.93442, -480.39215, 399.45184),
			Vec3(21.43339, -458.50406, 399.41254),
			Vec3(28.252466, -441.98026, 398.8759),
			Vec3(16.514505, -418.37857, 399.56757),
			Vec3(13.461928, -398.2239, 399.6475),
			Vec3(19.684639, -381.87088, 399.48453),
			Vec3(26.653587, -365.78824, 399.00174),
			Vec3(15.403652, -341.99905, 399.59668),
			Vec3(15.224707, -322.17545, 399.60132),
			Vec3(19.544426, -304.40463, 399.48822),
			Vec3(22.718262, -285.4331, 399.31146),
			Vec3(23.536346, -271.89014, 399.24707),
			Vec3(18.610113, -246.54175, 399.51266),
			Vec3(19.886858, -237.04247, 399.47925),
			Vec3(16.883596, -200.9559, 399.55792),
			Vec3(20.019955, -181.08101, 399.47577),
			Vec3(23.11494, -161.319, 399.2802),
			Vec3(16.921606, -145.00502, 399.5569),
			Vec3(19.99004, -125.18808, 399.47656),
			Vec3(18.08961, -106.76711, 399.52634),
			Vec3(18.362228, -88.21759, 399.51917),
			Vec3(17.93659, -68.90431, 399.5303),
			Vec3(24.205275, -51.367157, 399.1944),
			Vec3(28.165815, -23.937101, 398.88272),
			Vec3(21.974209, -7.896224, 399.37),
			Vec3(-221.08115, -369.54282, 333.25137),
			Vec3(25.113743, 30.83618, 399.1229),
			Vec3(17.533684, 46.253033, 399.54086),
			Vec3(19.000486, 65.99364, 399.50244),
			Vec3(20.51165, 85.703125, 399.4629),
			Vec3(23.85896, 109.15811, 399.22165),
			Vec3(12.070874, 131.5639, 399.6839),
			Vec3(19.993923, 146.70242, 399.47644),
			Vec3(25.886505, 162.592, 399.06207),
			Vec3(18.713717, 185.77621, 399.50995),
			Vec3(28.228016, 202.52916, 398.87784),
			Vec3(33.26772, 219.48816, 398.48117),
			Vec3(25.603254, 247.58406, 399.0844),
			Vec3(20.378656, 266.61597, 399.46637),
			Vec3(15.498534, 285.3294, 399.59415),
			Vec3(17.737888, 304.4351, 399.53552),
			Vec3(12.438554, 330.43106, 399.67432),
			Vec3(21.214733, 341.8607, 399.42975),
			Vec3(15.152269, 359.91382, 399.60324),
			Vec3(26.456783, 382.51392, 399.0172),
			Vec3(31.75866, 398.79858, 398.59998),
			Vec3(19.90048, 422.4042, 399.47888),
			Vec3(14.611273, 441.2799, 399.61743),
			Vec3(18.469091, 466.88107, 399.51636),
			Vec3(20.93442, 480.39215, 399.45184),
			Vec3(41.811386, -480.39215, 397.8088),
			Vec3(38.830025, -455.28226, 398.04346),
			Vec3(43.899426, -440.11508, 397.53387),
			Vec3(43.00782, -419.71866, 397.6513),
			Vec3(47.701992, -393.31387, 397.03326),
			Vec3(-81.18287, 399.2598, -391.62634),
			Vec3(43.99565, -363.6746, 397.5212),
			Vec3(41.377396, -334.21738, 397.84296),
			Vec3(41.601387, -325.08136, 397.82532),
			Vec3(55.41768, -305.27402, 396.01746),
			Vec3(39.394615, -284.63684, 397.999),
			Vec3(40.09756, -275.35983, 397.9437),
			Vec3(37.35146, -239.61993, 398.1598),
			Vec3(40.674164, -219.92827, 397.8983),
			Vec3(43.57666, -200.27628, 397.57642),
			Vec3(37.33545, -183.9044, 398.16104),
			Vec3(40.648277, -164.2762, 397.90036),
			Vec3(43.90039, -144.36629, 397.53375),
			Vec3(38.47793, -118.68802, 398.07114),
			Vec3(43.920208, -102.66977, 397.53116),
			Vec3(46.288925, -85.9138, 397.2193),
			Vec3(371.16104, 119.533356, -148.83014),
			Vec3(40.09479, -49.34492, 397.94388),
			Vec3(43.807163, -30.515001, 397.54605),
			Vec3(39.989075, -13.306412, 397.95224),
			Vec3(49.227654, 4.7331924, 396.8324),
			Vec3(42.637337, 29.758928, 397.70004),
			Vec3(43.862797, 49.590996, 397.53873),
			Vec3(36.088245, 64.6525, 398.25922),
			Vec3(45.63873, 89.00011, 397.30493),
			Vec3(32.729366, 109.54789, 398.52353),
			Vec3(37.01553, 125.45186, 398.18622),
			Vec3(39.272476, 141.0485, 398.0086),
			Vec3(43.715588, 168.20335, 397.5581),
			Vec3(36.15219, 185.91856, 398.25415),
			Vec3(48.692047, 200.23553, 396.90292),
			Vec3(49.87663, 222.30255, 396.74698),
			Vec3(42.618145, 252.11275, 397.7026),
			Vec3(37.28601, 270.88953, 398.16495),
			Vec3(41.665188, 287.01312, 397.82028),
			Vec3(36.927822, 306.4563, 398.1931),
			Vec3(45.223824, 315.11377, 397.35956),
			Vec3(34.17475, 346.32657, 398.4098),
			Vec3(32.755764, 364.55734, 398.52145),
			Vec3(43.408134, 386.29407, 397.59857),
			Vec3(48.65232, 402.87003, 396.90814),
			Vec3(38.1386, 428.91666, 398.09784),
			Vec3(33.59646, 435.546, 398.45532),
			Vec3(46.643997, 456.20242, 397.17255),
			Vec3(41.811386, 480.39215, 397.8088),
			Vec3(62.573795, -480.39215, 395.07535),
			Vec3(59.02475, -461.25934, 395.5426),
			Vec3(67.51489, -444.46628, 394.15958),
			Vec3(64.00275, -413.31027, 394.81052),
			Vec3(56.39091, -397.37897, 395.88934),
			Vec3(63.814056, -381.0548, 394.84552),
			Vec3(61.504883, -361.77158, 395.21606),
			Vec3(59.813847, -342.03732, 395.4387),
			Vec3(60.461403, -322.76883, 395.35345),
			Vec3(63.64945, -313.37778, 394.87598),
			Vec3(57.133537, -278.4384, 395.7916),
			Vec3(60.565525, -259.11124, 395.33978),
			Vec3(63.93656, -239.5816, 394.8228),
			Vec3(57.992096, -222.85652, 395.67853),
			Vec3(59.492897, -203.27762, 395.48096),
			Vec3(64.33472, -183.85443, 394.74896),
			Vec3(59.286648, -157.56903, 395.50812),
			Vec3(64.37296, -141.48358, 394.74188),
			Vec3(65.15339, -127.572586, 394.5973),
			Vec3(69.601036, -108.20711, 393.77292),
			Vec3(61.899624, -92.75661, 395.16412),
			Vec3(399.70822, 202.6863, 11.142733),
			Vec3(66.45119, -39.097755, 394.35672),
			Vec3(64.87607, -28.720192, 394.64868),
			Vec3(186.33835, 455.76755, 353.82785),
			Vec3(66.68359, 11.310183, 394.31363),
			Vec3(60.158024, 29.739822, 395.3934),
			Vec3(60.92779, 48.535557, 395.29205),
			Vec3(62.13806, 66.93992, 395.13272),
			Vec3(62.39574, 90.87703, 395.09882),
			Vec3(56.237797, 120.8288, 395.9095),
			Vec3(63.83759, 129.24481, 394.84113),
			Vec3(65.57829, 141.07372, 394.5185),
			Vec3(59.877625, 166.09947, 395.4303),
			Vec3(70.1422, 182.98834, 393.67264),
			Vec3(75.30652, 199.36984, 392.71548),
			Vec3(66.22084, 226.85646, 394.3994),
			Vec3(61.792236, 246.46727, 395.17825),
			Vec3(57.040382, 265.51407, 395.80383),
			Vec3(59.101074, 284.61453, 395.53253),
			Vec3(53.7034, 309.9015, 396.24316),
			Vec3(64.23955, 323.76117, 394.7666),
			Vec3(56.87151, 338.95526, 395.82608),
			Vec3(67.20648, 361.8128, 394.21674),
			Vec3(71.92827, 377.55902, 393.34164),
			Vec3(65.66167, 406.11316, 394.50305),
			Vec3(61.35927, 423.4796, 395.23526),
			Vec3(61.42141, 438.7995, 395.22705),
			Vec3(63.338905, 455.88055, 394.93353),
			Vec3(62.573795, 480.39215, 395.07535),
			Vec3(83.16463, -480.39215, 391.2591),
			Vec3(77.98719, -457.3483, 392.21866),
			Vec3(80.77983, -444.75986, 391.70105),
			Vec3(80.605255, -421.69034, 391.73343),
			Vec3(83.76334, -398.13596, 391.11536),
			Vec3(388.0329, -366.37317, -96.60257),
			Vec3(79.50351, -362.9083, 391.93762),
			Vec3(-72.59768, -268.34186, -393.21753),
			Vec3(79.180664, -318.12787, 391.99744),
			Vec3(80.29082, -299.66223, 391.7917),
			Vec3(84.15566, -279.74612, 391.02115),
			Vec3(77.57491, -262.64404, 392.29504),
			Vec3(79.93191, -242.79895, 391.85822),
			Vec3(84.67398, -223.77425, 390.89673),
			Vec3(79.861595, -196.98901, 391.87128),
			Vec3(84.46597, -182.14355, 390.94666),
			Vec3(86.33851, -167.19165, 390.4971),
			Vec3(87.96761, -146.99521, 390.10602),
			Vec3(81.12076, -130.53183, 391.63788),
			Vec3(76.06183, -114.52903, 392.5755),
			Vec3(81.430214, -84.48169, 391.5805),
			Vec3(93.05913, -72.02267, 388.88364),
			Vec3(85.208466, -47.211422, 390.7684),
			Vec3(81.88659, -28.295347, 391.49594),
			Vec3(90.813896, -14.653129, 389.42264),
			Vec3(84.149055, 9.641701, 391.02277),
			Vec3(85.50518, 29.094563, 390.69714),
			Vec3(77.278435, 43.62996, 392.35),
			Vec3(87.42997, 67.56135, 390.23505),
			Vec3(78.12778, 91.36837, 392.19263),
			Vec3(79.37467, 109.99568, 391.9615),
			Vec3(81.35579, 121.335464, 391.5943),
			Vec3(81.789444, 148.33582, 391.51395),
			Vec3(78.13496, 167.70496, 392.19128),
			Vec3(91.0242, 179.84201, 389.3722),
			Vec3(91.494606, 203.55421, 389.25922),
			Vec3(83.59825, 232.03207, 391.15497),
			Vec3(78.11314, 250.7955, 392.1953),
			Vec3(82.83331, 266.50015, 391.32047),
			Vec3(78.3029, 286.0998, 392.16016),
			Vec3(85.92083, 294.97736, 390.59735),
			Vec3(72.93494, 328.67133, 393.15503),
			Vec3(75.15356, 346.93973, 392.74384),
			Vec3(83.774864, 365.09262, 391.1126),
			Vec3(88.44881, 381.06155, 389.99048),
			Vec3(81.72126, 410.10593, 391.5266),
			Vec3(80.80997, 420.4141, 391.6955),
			Vec3(86.04714, 429.14355, 390.56705),
			Vec3(81.3551, 456.20602, 391.59448),
			Vec3(83.16463, 480.39215, 391.2591),
			Vec3(103.52763, -480.39215, 386.37036),
			Vec3(102.67734, -460.04422, 386.57446),
			Vec3(109.01706, -443.34683, 384.7443),
			Vec3(99.210556, -416.9424, 387.40677),
			Vec3(93.99571, -397.8279, 388.65875),
			Vec3(99.09186, -374.77966, 387.43527),
			Vec3(105.64853, -364.40732, 385.74213),
			Vec3(102.858696, -338.2697, 386.53094),
			Vec3(104.78722, -319.65854, 385.99725),
			Vec3(99.379105, -302.38922, 387.3663),
			Vec3(102.28866, -283.3196, 386.6678),
			Vec3(101.09292, -266.26587, 386.9549),
			Vec3(99.85184, -237.80092, 387.2528),
			Vec3(102.38247, -224.9137, 386.64526),
			Vec3(109.79883, -207.11424, 384.51276),
			Vec3(108.16931, -186.82024, 384.99542),
			Vec3(100.50591, -170.0672, 387.0958),
			Vec3(95.67319, -153.79301, 388.25604),
			Vec3(100.44592, -123.83022, 387.11023),
			Vec3(104.030106, -104.053185, 386.2215),
			Vec3(107.86253, -84.43622, 385.0863),
			Vec3(101.78222, -68.26211, 386.78937),
			Vec3(103.73935, -48.608128, 386.30765),
			Vec3(106.74582, -28.72697, 385.41705),
			Vec3(107.57689, -9.22839, 385.1709),
			Vec3(101.47226, 9.814198, 386.86383),
			Vec3(102.51892, 28.025301, 386.61252),
			Vec3(102.8864, 45.692184, 386.52432),
			Vec3(104.8347, 71.735214, 385.98315),
			Vec3(94.16994, 95.493004, 388.6169),
			Vec3(103.63132, 108.700096, 386.33966),
			Vec3(108.892456, 124.83662, 384.7812),
			Vec3(98.175, 150.26404, 387.6554),
			Vec3(111.43402, 164.05977, 384.02835),
			Vec3(115.89754, 180.95787, 382.70624),
			Vec3(105.26431, 204.9217, 385.8559),
			Vec3(102.96395, 227.58963, 386.5057),
			Vec3(97.59041, 244.39177, 387.79575),
			Vec3(99.76739, 264.15015, 387.2731),
			Vec3(94.64977, 289.66534, 388.5017),
			Vec3(104.164314, 302.34186, 386.18176),
			Vec3(97.27176, 319.30798, 387.87228),
			Vec3(108.0605, 342.10635, 385.02765),
			Vec3(113.42372, 358.02783, 383.439),
			Vec3(104.38518, 383.85657, 386.11633),
			Vec3(100.38151, 404.02228, 387.12567),
			Vec3(91.35202, 421.44498, 389.2935),
			Vec3(109.65549, 438.60507, 384.55518),
			Vec3(100.33253, 455.64804, 387.13742),
			Vec3(103.527664, 480.39215, 386.37036),
			Vec3(123.60681, -480.39215, 380.42264),
			Vec3(119.11346, -456.75967, 381.7536),
			Vec3(117.86502, -446.8591, 382.1234),
			Vec3(122.55052, -421.25735, 380.7355),
			Vec3(126.49711, -394.53156, 379.3991),
			Vec3(122.635765, -376.94412, 380.71027),
			Vec3(122.167206, -361.60938, 380.84903),
			Vec3(120.45477, -342.57535, 381.35632),
			Vec3(121.15758, -323.06577, 381.1481),
			Vec3(125.898544, -307.06995, 379.61105),
			Vec3(118.60385, -278.13586, 381.90457),
			Vec3(124.59531, -262.57147, 380.0726),
			Vec3(129.83499, -246.34743, 378.21713),
			Vec3(135.10925, -230.13428, 376.34943),
			Vec3(120.5379, -208.45157, 381.33167),
			Vec3(115.89334, -192.58609, 382.7075),
			Vec3(120.37307, -162.75873, 381.3805),
			Vec3(122.864746, -143.13591, 380.64243),
			Vec3(125.951004, -123.36351, 379.59253),
			Vec3(120.49863, -106.980255, 381.34332),
			Vec3(124.281456, -87.12348, 380.18372),
			Vec3(127.245255, -67.1145, 379.1342),
			Vec3(120.23727, -50.803112, 381.42072),
			Vec3(130.11813, -36.958683, 378.11682),
			Vec3(124.28684, -10.971736, 380.18182),
			Vec3(125.98657, 8.847789, 379.5799),
			Vec3(118.579605, 23.515188, 381.91174),
			Vec3(126.808044, 48.081135, 379.289),
			Vec3(115.2487, 70.8503, 382.8984),
			Vec3(121.35919, 90.40164, 381.08838),
			Vec3(122.95696, 103.09717, 380.6151),
			Vec3(125.2231, 128.5524, 379.85028),
			Vec3(117.97817, 146.90146, 382.08987),
			Vec3(130.83057, 160.87999, 377.86456),
			Vec3(131.74956, 183.89326, 377.53912),
			Vec3(124.66656, 211.50955, 380.04733),
			Vec3(120.74359, 226.34169, 381.27072),
			Vec3(123.15726, 245.42953, 380.5558),
			Vec3(116.41388, 261.7199, 382.55325),
			Vec3(126.295425, 275.2643, 379.47052),
			Vec3(116.91886, 306.19733, 382.4037),
			Vec3(115.230804, 326.0896, 382.90372),
			Vec3(124.48623, 344.72427, 380.1112),
			Vec3(129.43558, 361.45474, 378.35858),
			Vec3(122.781845, 390.3795, 380.66696),
			Vec3(115.629654, 406.87415, 382.78558),
			Vec3(124.72987, 412.5575, 380.0249),
			Vec3(126.086464, 441.2518, 379.54453),
			Vec3(124.24669, 464.69745, 380.19604),
			Vec3(123.6068, 480.39215, 380.42264),
			Vec3(143.34717, -480.39215, 373.4322),
			Vec3(144.09818, -458.63538, 373.12115),
			Vec3(150.20468, -441.77487, 370.5917),
			Vec3(138.79898, -418.24768, 375.0428),
			Vec3(135.39238, -397.87537, 376.2491),
			Vec3(141.17886, -381.73047, 374.2),
			Vec3(148.07047, -366.0521, 371.47577),
			Vec3(137.25247, -342.52933, 375.59045),
			Vec3(138.10136, -323.08438, 375.28986),
			Vec3(140.86423, -303.3762, 374.31146),
			Vec3(145.98274, -286.4226, 372.3405),
			Vec3(152.31252, -269.75745, 369.7186),
			Vec3(139.23653, -248.56848, 374.88785),
			Vec3(142.9382, -234.71266, 373.57703),
			Vec3(139.77821, -201.48483, 374.696),
			Vec3(142.61629, -181.86203, 373.69104),
			Vec3(145.2122, -162.27335, 372.65967),
			Vec3(138.9087, -146.19812, 375.00394),
			Vec3(142.0717, -126.564896, 373.88385),
			Vec3(145.14354, -107.03579, 372.6881),
			Vec3(140.91832, -89.98726, 374.2923),
			Vec3(144.83157, -69.844086, 372.81735),
			Vec3(144.13007, -59.040146, 373.1079),
			Vec3(147.8942, -19.00304, 371.54874),
			Vec3(140.4069, -12.836641, 374.4734),
			Vec3(142.0761, 7.414641, 373.8823),
			Vec3(143.61275, 27.37751, 373.32217),
			Vec3(142.53929, 50.787083, 373.71826),
			Vec3(137.39398, 80.54221, 375.5403),
			Vec3(144.42506, 89.19013, 372.98572),
			Vec3(146.77977, 102.57893, 372.01035),
			Vec3(141.03003, 126.79132, 374.25275),
			Vec3(149.8057, 143.86981, 370.75696),
			Vec3(154.67952, 160.88898, 368.73816),
			Vec3(144.90273, 185.58844, 372.78784),
			Vec3(143.13469, 207.34962, 373.50745),
			Vec3(139.48827, 225.56659, 374.7987),
			Vec3(140.06558, 244.36964, 374.59427),
			Vec3(134.06366, 269.42886, 376.71964),
			Vec3(143.57852, 283.07034, 373.33636),
			Vec3(136.9219, 299.85837, 375.70752),
			Vec3(148.13295, 321.06128, 371.44986),
			Vec3(152.16098, 336.91748, 369.78137),
			Vec3(145.49683, 365.58194, 372.54178),
			Vec3(141.61557, 384.46317, 374.04538),
			Vec3(142.02118, 403.46982, 373.90173),
			Vec3(147.42139, 417.8389, 371.74463),
			Vec3(140.88896, 443.18967, 374.30267),
			Vec3(146.95108, 458.74957, 371.9394),
			Vec3(143.34717, 480.39215, 373.4322),
			Vec3(162.69461, -480.39215, 365.4182),
			Vec3(160.05994, -455.0202, 366.50952),
			Vec3(163.63455, -439.98395, 364.9699),
			Vec3(163.44495, -419.40405, 365.0603),
			Vec3(167.39188, -393.38446, 363.17773),
			Vec3(104.24768, -284.15424, -386.15704),
			Vec3(164.16983, -363.75262, 364.71454),
			Vec3(161.3379, -335.50647, 365.9802),
			Vec3(163.50922, -328.2315, 365.02963),
			Vec3(173.66492, -305.78848, 360.18567),
			Vec3(161.6051, -285.28952, 365.86948),
			Vec3(161.52327, -274.7577, 365.90338),
			Vec3(159.37495, -239.6669, 366.79324),
			Vec3(161.85265, -220.27327, 365.76694),
			Vec3(164.77948, -200.65234, 364.4238),
			Vec3(158.83835, -184.59993, 367.0155),
			Vec3(160.94919, -165.19057, 366.14117),
			Vec3(163.56459, -145.31732, 365.00323),
			Vec3(158.255, -129.448, 367.25714),
			Vec3(160.21442, -109.873695, 366.44556),
			Vec3(167.1835, -84.85015, 363.2771),
			Vec3(160.79408, -69.569, 366.2054),
			Vec3(168.91829, -55.97569, 362.44965),
			Vec3(162.98508, -30.692513, 365.27966),
			Vec3(164.49637, -11.002537, 364.55884),
			Vec3(157.58751, 4.357533, 367.53363),
			Vec3(167.45682, 28.010796, 363.14673),
			Vec3(158.34418, 51.46355, 367.2202),
			Vec3(158.13849, 70.14278, 367.30542),
			Vec3(160.59807, 80.98969, 366.28662),
			Vec3(163.65668, 109.238464, 364.95935),
			Vec3(158.15483, 127.54306, 367.29865),
			Vec3(169.40665, 141.52844, 362.21674),
			Vec3(169.94402, 163.67523, 361.96042),
			Vec3(164.27092, 191.07378, 364.66638),
			Vec3(159.78055, 206.21916, 366.62524),
			Vec3(163.12628, 226.29227, 365.21234),
			Vec3(158.52126, 245.30328, 367.14688),
			Vec3(165.16252, 255.23569, 364.24106),
			Vec3(156.64622, 285.3248, 367.92355),
			Vec3(155.48114, 305.64075, 368.40613),
			Vec3(163.46228, 324.45767, 365.05203),
			Vec3(167.71426, 340.79056, 363.02396),
			Vec3(161.76329, 367.03802, 365.80396),
			Vec3(158.29593, 381.9121, 367.24017),
			Vec3(166.81563, 393.04318, 363.45258),
			Vec3(164.32004, 418.64914, 364.6429),
			Vec3(159.90338, 436.64395, 366.57437),
			Vec3(162.652, 462.56, 365.43585),
			Vec3(162.69461, 480.39215, 365.4182),
			Vec3(181.59624, -480.39215, 356.4026),
			Vec3(178.31488, -460.3778, 357.9677),
			Vec3(186.0095, -444.03766, 354.00638),
			Vec3(182.68736, -413.18927, 355.81018),
			Vec3(175.75922, -397.195, 359.1867),
			Vec3(181.88423, -381.5437, 356.24622),
			Vec3(179.89844, -361.7432, 357.2124),
			Vec3(178.14268, -341.8236, 358.0499),
			Vec3(180.12514, -322.3035, 357.1043),
			Vec3(182.99509, -312.98193, 355.64307),
			Vec3(177.63701, -278.2099, 358.29105),
			Vec3(180.7882, -258.48483, 356.788),
			Vec3(183.24307, -239.27238, 355.50842),
			Vec3(177.63443, -223.00996, 358.29227),
			Vec3(180.56516, -203.40508, 356.8944),
			Vec3(183.42744, -183.65462, 355.40833),
			Vec3(176.81216, -167.40843, 358.6845),
			Vec3(178.98325, -147.60457, 357.64893),
			Vec3(185.01251, -130.18765, 354.5477),
			Vec3(188.79753, -102.850945, 352.49265),
			Vec3(182.7085, -86.293, 355.79868),
			Vec3(88.52214, -473.39847, -389.97284),
			Vec3(185.4544, -47.56833, 354.3078),
			Vec3(178.65329, -32.125687, 357.80634),
			Vec3(179.96619, -12.480774, 357.1801),
			Vec3(181.31598, 7.123419, 356.53625),
			Vec3(184.35606, 29.879911, 354.90414),
			Vec3(174.36893, 52.77501, 359.84982),
			Vec3(181.0438, 68.20337, 356.6661),
			Vec3(185.67139, 84.13852, 354.19),
			Vec3(179.28275, 107.76698, 357.50607),
			Vec3(187.94386, 124.86222, 352.95612),
			Vec3(192.63763, 141.99649, 350.4076),
			Vec3(184.10066, 168.1298, 355.04285),
			Vec3(181.20131, 188.12422, 356.591),
			Vec3(182.54362, 205.88568, 355.88818),
			Vec3(178.97697, 224.69162, 357.65195),
			Vec3(173.58691, 251.399, 360.22284),
			Vec3(182.74191, 265.10403, 355.78058),
			Vec3(176.20958, 278.28003, 358.9719),
			Vec3(186.62085, 301.33734, 353.67447),
			Vec3(190.32071, 317.93005, 351.66562),
			Vec3(182.34296, 345.78445, 355.99716),
			Vec3(178.50233, 365.52002, 357.8783),
			Vec3(182.44804, 383.14215, 355.9401),
			Vec3(181.11143, 400.7637, 356.63388),
			Vec3(178.73833, 421.57367, 357.76578),
			Vec3(177.25928, 439.33487, 358.47122),
			Vec3(177.39285, 458.41373, 358.40753),
			Vec3(181.59624, 480.39215, 356.4026),
			Vec3(200, -480.39215, 346.4102),
			Vec3(195.59134, -457.06863, 348.8039),
			Vec3(198.01636, -444.73822, 347.4872),
			Vec3(197.89157, -421.57147, 347.55496),
			Vec3(200.49011, -398.22098, 346.10986),
			Vec3(382.18356, -264.4608, 117.66196),
			Vec3(195.18988, -360.573, 349.02188),
			Vec3(387.47882, -299.62366, 98.910484),
			Vec3(196.98663, -315.3547, 348.0463),
			Vec3(197.45078, -298.34497, 347.7943),
			Vec3(202.01082, -278.7428, 345.17795),
			Vec3(195.49222, -262.18542, 348.8577),
			Vec3(197.72885, -242.32079, 347.6433),
			Vec3(201.40161, -222.80197, 345.55127),
			Vec3(197.18977, -197.28746, 347.93604),
			Vec3(199.91241, -181.77954, 346.45776),
			Vec3(205.37115, -164.97847, 343.1187),
			Vec3(298.4001, -182.53409, 266.315),
			Vec3(199.82443, -125.501495, 346.5055),
			Vec3(197.72159, -105.92582, 347.64725),
			Vec3(198.02931, -88.63025, 347.48016),
			Vec3(206.78137, -73.47215, 342.25458),
			Vec3(200.84364, -48.971386, 345.89322),
			Vec3(201.80617, -29.028446, 345.30334),
			Vec3(195.09677, -13.695163, 349.07242),
			Vec3(203.35043, 10.568837, 344.35703),
			Vec3(191.58507, 32.249256, 350.97913),
			Vec3(196.04568, 47.025448, 348.5572),
			Vec3(198.40967, 62.992958, 347.27368),
			Vec3(201.67624, 90.3796, 345.383),
			Vec3(195.0271, 107.99293, 349.11023),
			Vec3(206.08284, 122.327354, 342.68262),
			Vec3(206.98264, 144.45718, 342.13123),
			Vec3(200.6626, 172.7211, 346.00415),
			Vec3(197.72643, 187.07474, 347.64462),
			Vec3(199.49374, 207.19714, 346.68506),
			Vec3(196.55098, 227.72891, 348.28284),
			Vec3(202.89198, 235.29518, 344.638),
			Vec3(193.57208, 272.81793, 349.90024),
			Vec3(191.03381, 282.08356, 351.2784),
			Vec3(201.21773, 305.6553, 345.66394),
			Vec3(204.78554, 322.1182, 343.4776),
			Vec3(197.28868, 350.33963, 347.88232),
			Vec3(200.5963, 367.46445, 346.04477),
			Vec3(201.49667, 376.22992, 345.493),
			Vec3(197.17583, 394.80762, 347.94357),
			Vec3(198.75938, 421.37357, 347.08377),
			Vec3(200.62202, 436.22665, 346.02902),
			Vec3(195.2207, 455.42203, 349.00513),
			Vec3(200, 480.39215, 346.4102),
			Vec3(217.85559, -480.39215, 335.46826),
			Vec3(216.94653, -460.81998, 336.02536),
			Vec3(222.23631, -442.27597, 332.45752),
			Vec3(214.9906, -417.34357, 337.22394),
			Vec3(211.78267, -399.65436, 339.18976),
			Vec3(213.23332, -375.59995, 338.30078),
			Vec3(218.9292, -364.3, 334.73038),
			Vec3(216.6725, -338.559, 336.19324),
			Vec3(219.42105, -318.85043, 334.39236),
			Vec3(213.49501, -302.07162, 338.1404),
			Vec3(216.07558, -282.99167, 336.55908),
			Vec3(216.19821, -265.32297, 336.4839),
			Vec3(214.85837, -235.36583, 337.30496),
			Vec3(216.1087, -225.44054, 336.53876),
			Vec3(219.01022, -205.55116, 334.67468),
			Vec3(228.40117, -192.25302, 328.2205),
			Vec3(218.60359, -171.01881, 334.9542),
			Vec3(339.69318, -302.92752, 210.96115),
			Vec3(221.47961, -117.0112, 332.97757),
			Vec3(220.08736, -107.16804, 333.9344),
			Vec3(163.98608, -102.824875, 364.80222),
			Vec3(221.42856, -67.422035, 333.01263),
			Vec3(215.8351, -48.812653, 336.70642),
			Vec3(216.44327, -30.144785, 336.33374),
			Vec3(217.63246, -11.694778, 335.60498),
			Vec3(217.32008, 12.43507, 335.79645),
			Vec3(212.70914, 42.48068, 338.622),
			Vec3(219.33931, 51.164635, 334.44852),
			Vec3(220.72525, 64.11282, 333.49603),
			Vec3(215.48364, 88.25759, 336.9218),
			Vec3(224.20508, 105.29874, 331.1044),
			Vec3(228.33487, 122.41516, 328.26602),
			Vec3(220.19379, 148.72388, 333.86127),
			Vec3(217.43456, 169.06317, 335.7263),
			Vec3(219.896, 187.87558, 334.06592),
			Vec3(213.95639, 205.58505, 337.85767),
			Vec3(210.78845, 230.80878, 339.799),
			Vec3(219.69107, 243.94424, 334.20682),
			Vec3(212.99727, 258.4837, 338.44543),
			Vec3(222.21594, 282.04852, 332.47147),
			Vec3(225.86113, 298.27075, 329.9662),
			Vec3(218.91539, 326.86142, 334.73987),
			Vec3(214.28946, 346.16684, 337.65363),
			Vec3(215.95604, 365.2406, 336.63232),
			Vec3(216.8643, 381.61627, 336.0757),
			Vec3(219.33395, 398.0088, 334.4522),
			Vec3(214.13235, 425.3334, 337.7499),
			Vec3(223.11337, 441.71008, 331.85468),
			Vec3(216.99394, 464.64386, 335.99628),
			Vec3(217.85559, 480.39215, 335.46826),
			Vec3(235.11404, -480.39215, 323.60684),
			Vec3(231.40878, -456.42337, 326.15338),
			Vec3(232.5804, -446.85455, 325.34818),
			Vec3(234.60455, -422.04495, 323.95703),
			Vec3(237.9048, -394.93256, 321.46542),
			Vec3(234.59296, -377.48837, 323.96497),
			Vec3(232.98851, -360.8472, 325.0677),
			Vec3(231.84029, -341.52972, 325.8568),
			Vec3(233.71451, -321.15265, 324.56876),
			Vec3(235.86089, -301.5191, 323.03378),
			Vec3(231.33038, -274.96976, 326.20728),
			Vec3(240.0863, -261.27448, 319.79147),
			Vec3(242.75858, -241.35405, 317.74097),
			Vec3(244.15125, -231.49033, 316.67233),
			Vec3(233.27666, -208.64748, 324.86966),
			Vec3(233.62212, -162.97716, 324.63223),
			Vec3(243.02448, -150.62407, 317.53693),
			Vec3(237.4362, -125.40405, 321.82498),
			Vec3(234.54985, -106.7564, 323.9946),
			Vec3(241.0871, -93.28883, 319.02356),
			Vec3(235.93199, -68.95079, 322.97925),
			Vec3(236.98882, -49.505737, 322.16827),
			Vec3(230.1104, -34.9658, 327.04575),
			Vec3(238.9871, -11.108565, 320.63492),
			Vec3(231.1105, 12.531482, 326.3584),
			Vec3(231.52031, 31.33858, 326.07678),
			Vec3(234.35744, 41.75531, 324.12686),
			Vec3(235.8502, 70.82491, 323.04196),
			Vec3(230.48453, 88.18782, 326.7886),
			Vec3(240.42555, 100.43895, 319.53116),
			Vec3(241.96838, 125.41573, 318.34732),
			Vec3(235.48822, 153.59442, 323.31973),
			Vec3(232.81075, 167.14125, 325.18985),
			Vec3(234.9864, 186.77399, 323.69458),
			Vec3(228.58002, 202.68652, 328.09753),
			Vec3(238.22495, 215.82228, 321.21976),
			Vec3(229.82283, 253.20433, 327.24338),
			Vec3(228.14276, 266.97055, 328.3981),
			Vec3(236.05676, 286.36996, 322.88345),
			Vec3(239.4197, 303.21393, 320.303),
			Vec3(232.59712, 331.37677, 325.33667),
			Vec3(226.73973, 348.62408, 329.36237),
			Vec3(236.12144, 358.63254, 322.83383),
			Vec3(235.68085, 378.17676, 323.17194),
			Vec3(234.32086, 399.9313, 324.15198),
			Vec3(236.91916, 419.49185, 322.2217),
			Vec3(238.84598, 441.4769, 320.74323),
			Vec3(226.92776, 464.35767, 329.23312),
			Vec3(235.11404, 480.39215, 323.60684),
			Vec3(251.7282, -480.39215, 310.85834),
			Vec3(251.38681, -463.64288, 311.1203),
			Vec3(258.07623, -443.0351, 305.4366),
			Vec3(247.61087, -419.02515, 314.01767),
			Vec3(245.44379, -399.4237, 315.68054),
			Vec3(249.10661, -382.04114, 312.86996),
			Vec3(255.4145, -366.02887, 307.70993),
			Vec3(245.8017, -343.1136, 315.4059),
			Vec3(247.67981, -323.6044, 313.96478),
			Vec3(249.74622, -303.99463, 312.37918),
			Vec3(257.07562, -290.15204, 306.2912),
			Vec3(259.53952, -270.11484, 304.18686),
			Vec3(248.9155, -247.72798, 313.0166),
			Vec3(250.29001, -237.88873, 311.96188),
			Vec3(248.63077, -201.99692, 313.23508),
			Vec3(251.90561, -182.33565, 310.70682),
			Vec3(255.15489, -162.84338, 307.93167),
			Vec3(250.27106, -146.71344, 311.97644),
			Vec3(251.56065, -126.74778, 310.9869),
			Vec3(253.98041, -107.08934, 308.93478),
			Vec3(254.80078, -87.61699, 308.2341),
			Vec3(250.01468, -68.82983, 312.17316),
			Vec3(250.84827, -50.59481, 311.53354),
			Vec3(251.10083, -32.962193, 311.33975),
			Vec3(252.76382, -6.5699344, 309.97382),
			Vec3(245.0466, 17.021978, 315.98532),
			Vec3(251.28477, 29.782688, 311.1986),
			Vec3(256.347, 44.572025, 306.9135),
			Vec3(249.20065, 69.35068, 312.7978),
			Vec3(257.7298, 85.73682, 305.7325),
			Vec3(261.4971, 102.7864, 302.51492),
			Vec3(255.18225, 130.59258, 307.9083),
			Vec3(251.03746, 149.64108, 311.38837),
			Vec3(253.40285, 166.64246, 309.42807),
			Vec3(248.98111, 185.1573, 312.96625),
			Vec3(244.45708, 210.08652, 316.43768),
			Vec3(253.0329, 220.07864, 309.74402),
			Vec3(247.31464, 239.07205, 314.245),
			Vec3(255.77039, 262.96017, 307.406),
			Vec3(259.03528, 279.72708, 304.61752),
			Vec3(252.3721, 308.05997, 310.3084),
			Vec3(248.19228, 327.3337, 313.57156),
			Vec3(249.39532, 347.03064, 312.6484),
			Vec3(252.9783, 361.43164, 309.79065),
			Vec3(249.67451, 381.43674, 312.43417),
			Vec3(249.59245, 398.53613, 312.49716),
			Vec3(257.71664, 416.884, 305.74374),
			Vec3(253.67352, 446.03522, 309.19687),
			Vec3(251.51619, 465.48938, 311.02103),
			Vec3(251.7282, 480.39215, 310.85834),
			Vec3(267.65225, -480.39215, 297.25793),
			Vec3(264.49377, -457.09308, 299.9555),
			Vec3(265.867, -445.32596, 298.78268),
			Vec3(268.30313, -419.34018, 296.64026),
			Vec3(271.28864, -393.2375, 293.80713),
			Vec3(256.82455, -300.11127, 306.50565),
			Vec3(268.51364, -363.74774, 296.4405),
			Vec3(265.87857, -334.94778, 298.7728),
			Vec3(268.2978, -328.5752, 296.64536),
			Vec3(276.79877, -305.82376, 288.57822),
			Vec3(269.7982, -282.82367, 295.2215),
			Vec3(265.4755, -276.32114, 299.11707),
			Vec3(263.52252, -240.87187, 300.78506),
			Vec3(266.24265, -221.44753, 298.46185),
			Vec3(268.94562, -201.882, 296.03058),
			Vec3(264.9486, -185.4123, 299.56708),
			Vec3(268.11923, -165.5757, 296.8148),
			Vec3(270.49777, -145.55911, 294.55765),
			Vec3(265.01117, -129.25223, 299.5136),
			Vec3(272.389, -115.27038, 292.7629),
			Vec3(268.05594, -89.309395, 296.87485),
			Vec3(269.44092, -69.421265, 295.56058),
			Vec3(263.61673, -54.708782, 300.7046),
			Vec3(270.0122, -29.883707, 295.0184),
			Vec3(260.58795, -7.502088, 303.2914),
			Vec3(265.50314, 9.9675, 299.09344),
			Vec3(266.6653, 25.411432, 298.10086),
			Vec3(269.99796, 52.519356, 295.03195),
			Vec3(262.61365, 67.906395, 301.56128),
			Vec3(272.1775, 80.52479, 292.96365),
			Vec3(273.9365, 106.789696, 291.2944),
			Vec3(268.05734, 135.51723, 296.87354),
			Vec3(263.94302, 154.12836, 300.42593),
			Vec3(267.35855, 170.13506, 297.50876),
			Vec3(263.23935, 190.08807, 301.0269),
			Vec3(269.9009, 197.483, 295.12405),
			Vec3(261.99164, 234.46445, 302.09253),
			Vec3(259.7356, 243.76106, 304.01938),
			Vec3(268.4141, 267.777, 296.53497),
			Vec3(271.53897, 284.44116, 293.56955),
			Vec3(265.7217, 312.58936, 298.90677),
			Vec3(255.936, 324.6672, 307.26453),
			Vec3(268.29456, 331.03436, 296.6484),
			Vec3(268.09906, 357.2305, 296.83392),
			Vec3(266.2462, 381.897, 298.4588),
			Vec3(266.8294, 393.28754, 297.9607),
			Vec3(270.6592, 419.44348, 294.40442),
			Vec3(267.0773, 448.61877, 297.749),
			Vec3(263.87955, 457.28424, 300.48013),
			Vec3(267.65225, 480.39215, 297.25793),
			Vec3(282.8427, -480.39215, 282.8427),
			Vec3(280.50232, -461.23523, 285.06366),
			Vec3(286.14337, -444.0591, 279.36456),
			Vec3(283.01868, -413.3817, 282.65726),
			Vec3(277.89737, -397.1134, 287.53568),
			Vec3(282.82526, -381.54285, 282.85928),
			Vec3(281.24167, -361.85696, 284.36206),
			Vec3(279.6067, -342.33197, 285.91357),
			Vec3(281.2014, -322.6929, 284.40027),
			Vec3(282.90024, -313.4488, 282.7821),
			Vec3(280.04926, -277.62622, 285.4936),
			Vec3(280.42554, -260.12976, 285.13654),
			Vec3(283.38858, -240.98138, 282.2675),
			Vec3(278.76892, -224.83798, 286.7086),
			Vec3(281.38626, -205.36536, 284.22482),
			Vec3(283.84122, -185.89525, 281.7905),
			Vec3(280.96198, -168.81628, 284.62747),
			Vec3(284.86884, -152.49545, 280.70764),
			Vec3(283.46478, -136.8233, 282.1872),
			Vec3(286.04996, -97.3375, 279.46298),
			Vec3(280.41833, -91.19607, 285.14334),
			Vec3(281.75858, -70.93597, 283.87152),
			Vec3(282.96176, -50.88627, 282.71725),
			Vec3(281.89313, -27.34152, 283.74384),
			Vec3(278.91187, 2.3368618, 286.57294),
			Vec3(284.3019, 13.02456, 281.30505),
			Vec3(285.43796, 22.41272, 280.1079),
			Vec3(281.19928, 48.335987, 284.40228),
			Vec3(287.64883, 65.988266, 277.77814),
			Vec3(291.09268, 82.58374, 274.14908),
			Vec3(286.0012, 111.19858, 279.51437),
			Vec3(282.48276, 130.46902, 283.1843),
			Vec3(284.57526, 147.57616, 281.01697),
			Vec3(280.46555, 166.11525, 285.09857),
			Vec3(275.98657, 191.24754, 289.34894),
			Vec3(283.79922, 202.57265, 281.83475),
			Vec3(278.75208, 220.6101, 286.72458),
			Vec3(286.15433, 243.94447, 279.353),
			Vec3(289.0677, 260.37402, 276.283),
			Vec3(283.57385, 289.3311, 282.07227),
			Vec3(279.58163, 308.59348, 285.93738),
			Vec3(281.9671, 325.85327, 283.67365),
			Vec3(283.67065, 341.1081, 281.97025),
			Vec3(280.1585, 363.4685, 285.38992),
			Vec3(279.96262, 386.017, 285.5758),
			Vec3(290.379, 397.9205, 274.90112),
			Vec3(284.201, 423.52283, 281.41138),
			Vec3(280.01328, 440.76007, 285.52777),
			Vec3(282.34045, 467.84338, 283.31934),
			Vec3(282.8427, 480.39215, 282.8427),
			Vec3(297.25793, -480.39215, 267.65228),
			Vec3(293.9447, -456.792, 271.14368),
			Vec3(294.3533, -444.87045, 270.7131),
			Vec3(294.9152, -422.2014, 270.121),
			Vec3(297.28015, -398.73126, 267.62625),
			Vec3(0.74272823, -24.550894, 399.9806),
			Vec3(293.37885, -360.8876, 271.73996),
			Vec3(148.15216, -306.97626, 371.44193),
			Vec3(294.86035, -316.50546, 270.1788),
			Vec3(294.94662, -299.21588, 270.0879),
			Vec3(298.5503, -279.58228, 266.1391),
			Vec3(296.79465, -263.09906, 268.14047),
			Vec3(295.43646, -244.54788, 269.57172),
			Vec3(297.37286, -223.99123, 267.51773),
			Vec3(293.39212, -208.42781, 271.72598),
			Vec3(295.0357, -188.6203, 269.994),
			Vec3(300.3608, -163.61098, 264.0193),
			Vec3(295.23578, -148.27124, 269.78317),
			Vec3(301.54907, -134.43695, 262.628),
			Vec3(297.335, -109.0792, 267.56207),
			Vec3(298.41306, -89.37105, 266.2998),
			Vec3(293.34467, -73.9559, 271.776),
			Vec3(300.62466, -50.154842, 263.71033),
			Vec3(293.61404, -26.712708, 271.49213),
			Vec3(293.47354, -7.974934, 271.6402),
			Vec3(295.77585, 2.6854544, 269.21408),
			Vec3(298.32138, 31.044025, 266.40714),
			Vec3(293.2574, 48.906063, 271.86795),
			Vec3(301.38055, 60.998444, 262.82532),
			Vec3(302.46176, 85.96694, 261.5594),
			Vec3(297.63614, 115.25117, 267.20947),
			Vec3(294.122, 134.36354, 270.95685),
			Vec3(296.98444, 151.18152, 267.94046),
			Vec3(293.27298, 170.84732, 271.85153),
			Vec3(299.4384, 178.54796, 265.0993),
			Vec3(292.39178, 216.16081, 272.78012),
			Vec3(291.75732, 228.78435, 273.4487),
			Vec3(297.65295, 248.40637, 267.1898),
			Vec3(300.3121, 264.83517, 264.0763),
			Vec3(295.02597, 294.10184, 270.00427),
			Vec3(292.9292, 303.92072, 272.2138),
			Vec3(297.41656, 311.3535, 267.46655),
			Vec3(297.72363, 338.5257, 267.107),
			Vec3(294.39642, 358.43158, 270.6677),
			Vec3(295.61517, 373.0402, 269.3834),
			Vec3(301.87396, 400.1469, 262.24762),
			Vec3(295.40527, 427.4167, 269.60458),
			Vec3(293.07428, 437.3573, 272.0609),
			Vec3(299.2395, 453.21683, 265.33218),
			Vec3(297.25793, 480.39215, 267.65228),
			Vec3(310.85846, -480.39215, 251.72812),
			Vec3(310.2255, -460.2629, 252.46921),
			Vec3(314.5439, -442.22473, 246.92511),
			Vec3(308.99106, -417.63434, 253.91455),
			Vec3(305.46375, -400.4607, 258.0445),
			Vec3(306.89374, -375.7608, 256.37018),
			Vec3(311.07648, -364.48074, 251.44395),
			Vec3(309.69748, -338.1766, 253.08745),
			Vec3(312.18933, -318.50745, 249.99368),
			Vec3(307.62088, -302.2904, 255.51883),
			Vec3(310.6629, -281.76605, 251.95708),
			Vec3(309.4455, -264.45135, 253.38248),
			Vec3(309.04346, -244.74268, 253.85321),
			Vec3(308.53955, -227.25752, 254.44319),
			Vec3(313.605, -209.59688, 248.14871),
			Vec3(315.6388, -181.71243, 245.49823),
			Vec3(311.3173, -165.07816, 251.13013),
			Vec3(-160.86043, 52.970806, 366.17798),
			Vec3(313.37045, -126.05293, 248.45438),
			Vec3(308.62033, -110.561134, 254.34862),
			Vec3(309.52908, -90.87333, 253.28459),
			Vec3(310.51172, -71.22342, 252.13408),
			Vec3(312.6954, -47.788982, 249.33412),
			Vec3(305.03598, -25.035583, 258.54535),
			Vec3(310.27957, -9.933205, 252.40588),
			Vec3(313.9384, 5.840494, 247.71425),
			Vec3(309.4392, 28.968489, 253.38983),
			Vec3(315.42087, 45.837753, 245.78223),
			Vec3(318.51593, 62.903687, 241.74867),
			Vec3(313.143, 90.18338, 248.75082),
			Vec3(310.37067, 109.782555, 252.29926),
			Vec3(307.01062, 128.98792, 256.23334),
			Vec3(308.4181, 148.73146, 254.5854),
			Vec3(304.9824, 174.45662, 258.6081),
			Vec3(312.31653, 187.57541, 249.8279),
			Vec3(306.92282, 202.09135, 256.33612),
			Vec3(313.99664, 225.46996, 247.63832),
			Vec3(316.75278, 241.66975, 244.04646),
			Vec3(310.836, 268.57944, 251.75443),
			Vec3(307.78406, 287.3292, 255.32776),
			Vec3(309.35614, 306.43976, 253.48709),
			Vec3(307.81696, 316.5892, 255.28928),
			Vec3(308.6955, 343.17416, 254.26062),
			Vec3(305.80527, 362.8455, 257.64462),
			Vec3(317.0445, 375.1605, 243.66626),
			Vec3(312.8935, 404.63547, 249.07599),
			Vec3(309.65573, 423.11157, 253.13632),
			Vec3(310.60846, 441.88815, 252.02084),
			Vec3(311.40936, 461.93448, 251.01013),
			Vec3(310.85843, 480.39215, 251.72813),
			Vec3(323.60684, -480.39215, 235.11404),
			Vec3(321.05084, -456.28006, 238.44511),
			Vec3(321.56317, -446.54285, 237.77742),
			Vec3(323.26993, -421.62723, 235.55312),
			Vec3(325.39966, -394.63925, 232.50548),
			Vec3(322.82162, -377.3734, 236.13739),
			Vec3(321.28116, -359.54807, 238.14493),
			Vec3(320.9124, -342.19467, 238.62552),
			Vec3(322.507, -321.73572, 236.54738),
			Vec3(324.19162, -302.80643, 234.26318),
			Vec3(320.2, -277.13342, 239.55397),
			Vec3(323.1224, -260.28912, 235.74538),
			Vec3(326.86847, -242.8427, 230.36835),
			Vec3(29.31534, -302.7117, 398.79224),
			Vec3(323.46115, -204.65216, 235.30394),
			Vec3(321.87158, -184.78172, 237.3755),
			Vec3(321.90448, -167.32993, 237.3326),
			Vec3(327.79883, -152.15475, 229.01468),
			Vec3(323.97458, -127.43286, 234.579),
			Vec3(324.7351, -107.32598, 233.47238),
			Vec3(320.0171, -92.3454, 239.79231),
			Vec3(325.3636, -67.23764, 232.55801),
			Vec3(318.60028, -48.69003, 241.63872),
			Vec3(320.70633, -31.677807, 238.89407),
			Vec3(322, -15.954772, 237.20811),
			Vec3(324.70752, 11.102971, 233.51254),
			Vec3(320.239, 29.228113, 239.5031),
			Vec3(327.85794, 43.37759, 228.9287),
			Vec3(328.4541, 65.958984, 228.06125),
			Vec3(323.97824, 94.864655, 234.57365),
			Vec3(320.75046, 113.20693, 238.83658),
			Vec3(323.14172, 129.88132, 235.72025),
			Vec3(320.6126, 149.46954, 239.01624),
			Vec3(325.19287, 158.36023, 232.80632),
			Vec3(317.4434, 191.97815, 243.14642),
			Vec3(318.74564, 210.71013, 241.44931),
			Vec3(324.1878, 229.00694, 234.26874),
			Vec3(327.0559, 245.04395, 230.09566),
			Vec3(322.22498, 268.624, 236.91496),
			Vec3(319.24078, 286.59488, 240.80405),
			Vec3(323.55832, 293.58047, 235.17732),
			Vec3(323.18604, 330.5738, 235.66245),
			Vec3(323.6678, 342.66235, 235.02536),
			Vec3(-293.45203, 130.39308, 271.6628),
			Vec3(327.20728, 379.47665, 229.87541),
			Vec3(323.03647, 409.01944, 235.85739),
			Vec3(321.6304, 418.9325, 237.6898),
			Vec3(325.51028, 434.6796, 232.34451),
			Vec3(320.8944, 458.873, 238.64899),
			Vec3(323.60684, 480.39215, 235.11404),
			Vec3(335.46826, -480.39215, 217.85559),
			Vec3(335.15195, -461.24286, 218.31587),
			Vec3(339.48065, -440.99432, 211.30792),
			Vec3(332.9559, -418.36163, 221.5111),
			Vec3(330.8884, -398.56506, 224.51932),
			Vec3(334.32355, -382.37637, 219.52116),
			Vec3(337.72534, -366.16757, 214.1724),
			Vec3(331.40515, -342.66464, 223.76746),
			Vec3(332.27948, -323.95187, 222.49529),
			Vec3(334.81317, -305.02786, 218.80878),
			Vec3(336.81805, -285.15735, 215.65292),
			Vec3(336.80988, -271.07806, 215.66626),
			Vec3(335.518, -250.89027, 217.77444),
			Vec3(-93.9705, -300.73755, 388.66483),
			Vec3(337.49744, -195.63339, 214.54425),
			Vec3(336.59518, -185.80064, 216.0166),
			Vec3(343.42343, 348.55072, 204.87395),
			Vec3(337.41998, -146.07402, 214.6707),
			Vec3(333.84595, -127.42066, 220.21613),
			Vec3(334.57227, -108.45729, 219.15924),
			Vec3(335.18396, -90.88371, 218.26929),
			Vec3(334.90186, -65.93803, 218.67969),
			Vec3(331.8559, -35.65084, 223.11157),
			Vec3(336.63214, -26.378477, 215.95633),
			Vec3(337.1825, -16.701096, 215.05821),
			Vec3(333.70633, 9.437002, 220.41922),
			Vec3(339.59256, 25.926199, 211.12532),
			Vec3(342.31998, 42.847755, 206.67459),
			Vec3(337.24606, 69.60542, 214.95451),
			Vec3(335.33292, 90.246574, 218.0525),
			Vec3(332.08362, 108.0935, 222.78029),
			Vec3(332.99243, 128.25117, 221.45796),
			Vec3(330.33844, 153.1732, 225.31952),
			Vec3(335.75452, 165.67923, 217.38849),
			Vec3(331.94012, 182.43315, 222.98907),
			Vec3(338.01456, 204.82079, 213.7004),
			Vec3(341.04, 220.07071, 208.76334),
			Vec3(336.40387, 244.90419, 216.3288),
			Vec3(334.10992, 263.39148, 219.832),
			Vec3(38.035526, -474.94855, 398.10596),
			Vec3(332.7797, 298.85648, 221.76749),
			Vec3(335.85477, 327.84683, 217.22487),
			Vec3(341.05923, 341.39206, 208.73201),
			Vec3(338.24863, 364.44516, 213.31842),
			Vec3(337.3558, 385.81952, 214.77538),
			Vec3(333.91638, 402.26532, 220.11356),
			Vec3(331.69888, 421.1278, 223.34009),
			Vec3(335.34088, 436.43372, 218.04094),
			Vec3(332.56375, 455.83777, 222.08167),
			Vec3(335.46826, 480.39215, 217.85559),
			Vec3(346.4102, -480.39215, 200),
			Vec3(343.77875, -456.39038, 204.29411),
			Vec3(345.36575, -443.92255, 201.70435),
			Vec3(346.96942, -419.49237, 198.97005),
			Vec3(348.93842, -393.25653, 195.34355),
			Vec3(-300.8188, -215.31633, 263.48297),
			Vec3(346.8665, -363.7299, 199.15958),
			Vec3(345.59216, -334.92133, 201.33493),
			Vec3(346.24915, -326.94547, 200.26276),
			Vec3(353.1319, -304.97913, 187.62009),
			Vec3(344.91125, -284.52325, 202.44601),
			Vec3(345.81793, -275.17075, 200.96643),
			Vec3(345.54718, -240.39986, 201.4083),
			Vec3(351.16376, -228.38347, 191.24503),
			Vec3(347.5893, -203.70615, 197.82835),
			Vec3(345.70605, -185.30556, 201.14902),
			Vec3(349.7414, -172.01051, 193.86462),
			Vec3(346.63174, -147.54597, 199.592),
			Vec3(347.21204, -128.08861, 198.52322),
			Vec3(343.27856, -113.56045, 205.11035),
			Vec3(348.14606, -89.39651, 196.80292),
			Vec3(343.46216, -65.6092, 204.81078),
			Vec3(343.87335, -47.03504, 204.1397),
			Vec3(346.3516, -37.620415, 200.09564),
			Vec3(346.16855, -9.366043, 200.39432),
			Vec3(343.00397, 7.5230365, 205.5584),
			Vec3(349.63333, 21.858624, 194.0637),
			Vec3(350.64886, 47.027756, 192.19331),
			Vec3(346.8057, 75.006935, 199.27155),
			Vec3(344.15222, 92.30529, 203.68463),
			Vec3(346.33267, 109.10473, 200.12648),
			Vec3(343.09198, 126.28183, 205.41483),
			Vec3(347.99588, 139.11401, 197.07953),
			Vec3(342.40063, 170.16138, 206.54295),
			Vec3(342.00378, 189.23363, 207.19057),
			Vec3(347.07672, 206.61478, 198.77235),
			Vec3(349.68524, 223.29863, 193.96808),
			Vec3(346.18472, 251.73059, 200.36789),
			Vec3(342.56116, 268.62943, 206.28104),
			Vec3(345.9537, 275.37137, 200.74492),
			Vec3(345.33493, 310.91953, 201.75462),
			Vec3(346.96304, 327.1132, 198.98172),
			Vec3(350.59094, 341.42087, 192.29999),
			Vec3(349.93115, 361.17923, 193.51523),
			Vec3(346.50275, 386.06586, 199.82954),
			Vec3(20.619715, -465.578, -399.46008),
			Vec3(345.76086, 422.09357, 201.05959),
			Vec3(344.9181, 431.28555, 202.43488),
			Vec3(348.72684, 456.31882, 195.73322),
			Vec3(346.4102, 480.39215, 200),
			Vec3(356.4026, -480.39215, 181.59624),
			Vec3(354.21735, -459.60873, 185.62097),
			Vec3(358.4082, -444.44446, 177.39142),
			Vec3(356.47565, -413.41113, 181.44315),
			Vec3(353.2032, -396.99734, 187.4888),
			Vec3(356.52448, -380.8279, 181.34067),
			Vec3(355.3088, -361.60904, 183.61078),
			Vec3(354.18384, -342.20038, 185.68268),
			Vec3(354.9499, -323.7767, 184.27184),
			Vec3(356.2221, -314.76794, 181.92862),
			Vec3(354.31604, -278.95966, 185.43924),
			Vec3(356.5233, -260.0391, 181.34322),
			Vec3(358.31555, -240.6526, 177.58574),
			Vec3(355.4131, -224.56735, 183.41872),
			Vec3(355.999, -204.73051, 182.3396),
			Vec3(357.51178, -184.9846, 179.2708),
			Vec3(358.03287, -165.3992, 178.17831),
			Vec3(354.95358, -147.69066, 184.26497),
			Vec3(355.49518, -128.90147, 183.2675),
			Vec3(356.06232, -109.2663, 182.22293),
			Vec3(356.30762, -88.851006, 181.77122),
			Vec3(351.86063, -63.804916, 189.96153),
			Vec3(355.84076, -48.640007, 182.631),
			Vec3(358.5977, -32.813255, 176.99416),
			Vec3(353.8293, -7.887767, 186.3356),
			Vec3(359.92355, 7.1173615, 174.2144),
			Vec3(361.95142, 23.576015, 169.96298),
			Vec3(358.18997, 50.496487, 177.8489),
			Vec3(356.5127, 69.798096, 181.3655),
			Vec3(354.5017, 89.03564, 185.09721),
			Vec3(354.747, 107.91134, 184.64545),
			Vec3(352.0494, 133.36176, 189.61382),
			Vec3(356.73352, 146.9253, 180.90247),
			Vec3(353.8763, 162.56761, 186.24907),
			Vec3(358.83954, 184.05872, 176.4871),
			Vec3(360.7013, 199.31181, 172.58385),
			Vec3(357.65918, 227.89732, 178.96178),
			Vec3(355.43887, 246.94876, 183.37119),
			Vec3(355.82678, 272.43625, 182.65677),
			Vec3(358.74985, 279.29657, 176.6751),
			Vec3(358.3199, 300.88663, 177.57658),
			Vec3(355.9184, 324.92496, 182.48808),
			Vec3(357.79727, 341.19006, 178.67221),
			Vec3(358.53552, 359.76807, 177.12448),
			Vec3(355.00415, 385.39462, 184.17184),
			Vec3(-5.3760457, -473.34018, 399.85925),
			Vec3(350.82477, 420.53134, 191.86934),
			Vec3(357.686, 430.97815, 178.90555),
			Vec3(354.33194, 456.7297, 185.40999),
			Vec3(356.4026, 480.39215, 181.59624),
			Vec3(365.4182, -480.39215, 162.69469),
			Vec3(363.04288, -456.9794, 167.67459),
			Vec3(364.05185, -445.25256, 165.5593),
			Vec3(363.81592, -422.1233, 166.05392),
			Vec3(365.4378, -398.2566, 162.64728),
			Vec3(-380.6526, 95.61391, 122.83042),
			Vec3(362.8036, -364.07468, 168.17633),
			Vec3(264.07227, 143.63214, -300.31552),
			Vec3(363.35342, -319.4728, 167.02356),
			Vec3(361.1247, -302.5794, 171.69623),
			Vec3(366.16327, -280.05914, 160.89597),
			Vec3(363.7625, -263.73782, 166.16583),
			Vec3(365.58072, -243.62273, 162.30234),
			Vec3(366.5912, -223.18884, 159.86278),
			Vec3(363.54675, -206.84265, 166.61821),
			Vec3(367.76752, -193.17732, 157.0229),
			Vec3(365.58987, -166.83815, 162.28018),
			Vec3(366.19952, -146.61105, 160.80835),
			Vec3(362.716, -131.49754, 168.35995),
			Vec3(366.61664, -106.33865, 159.80142),
			Vec3(363.23163, -88.558075, 167.27888),
			Vec3(363.75684, -68.475235, 166.17783),
			Vec3(363.19647, -58.200184, 167.35262),
			Vec3(365.77954, -30.213184, 161.82227),
			Vec3(362.80444, -9.794783, 168.17453),
			Vec3(368.4101, 3.45598, 155.47156),
			Vec3(368.7591, 26.781704, 154.62909),
			Vec3(366.00537, 55.27212, 161.27718),
			Vec3(363.74728, 72.59816, 166.19778),
			Vec3(365.54242, 89.438416, 162.3948),
			Vec3(363.49576, 108.97282, 166.72522),
			Vec3(366.6021, 118.209114, 159.83653),
			Vec3(362.99725, 153.27113, 167.77031),
			Vec3(362.3431, 169.45497, 169.14175),
			Vec3(366.1147, 187.57265, 161.01317),
			Vec3(367.50485, 202.95035, 157.65714),
			Vec3(364.92413, 232.50583, 163.73053),
			Vec3(362.71857, 251.51024, 168.35452),
			Vec3(365.5686, 258.7987, 162.33154),
			Vec3(366.28482, 283.58966, 160.60245),
			Vec3(366.73535, 304.2826, 159.51485),
			Vec3(366.13867, 327.21927, 160.95529),
			Vec3(366.04156, 339.32956, 161.18971),
			Vec3(366.1256, 359.76093, 160.98677),
			Vec3(366.16074, 390.0137, 160.90202),
			Vec3(360.43942, 404.21555, 173.13292),
			Vec3(320.4085, 300.06543, -239.28221),
			Vec3(363.099, 438.2527, 167.557),
			Vec3(367.77164, 461.10626, 157.01297),
			Vec3(365.4182, 480.39215, 162.69469),
			Vec3(373.4322, -480.39215, 143.34718),
			Vec3(373.1137, -459.1399, 144.11606),
			Vec3(375.36026, -442.88693, 137.90247),
			Vec3(371.57874, -417.65018, 147.82184),
			Vec3(369.44333, -398.08743, 152.97722),
			Vec3(371.56955, -375.3215, 147.84396),
			Vec3(373.66275, -364.9208, 142.69612),
			Vec3(372.48413, -339.32785, 145.63603),
			Vec3(373.67633, -319.4556, 142.65773),
			Vec3(371.5547, -302.95932, 147.8799),
			Vec3(372.79254, -283.2227, 144.89143),
			Vec3(374.06436, -263.3103, 141.56197),
			Vec3(374.08197, -240.3327, 141.51237),
			Vec3(373.74496, -227.00905, 142.46391),
			Vec3(373.44598, -215.75632, 143.3083),
			Vec3(374.88843, -175.629, 139.235),
			Vec3(372.34723, -165.66878, 145.96654),
			Vec3(372.854, -147.6632, 144.74303),
			Vec3(373.13312, -129.81607, 144.06918),
			Vec3(373.00815, -105.0148, 144.3709),
			Vec3(371.25146, -75.017715, 148.61195),
			Vec3(374.06415, -68.05975, 141.5627),
			Vec3(375.6349, -51.849083, 137.12698),
			Vec3(372.989, -30.33459, 144.41719),
			Vec3(375.7382, -13.533955, 136.83533),
			Vec3(377.58118, 2.7788925, 131.63081),
			Vec3(374.2377, 28.33269, 141.07245),
			Vec3(373.51044, 50.567516, 143.12625),
			Vec3(371.51334, 67.79568, 147.97969),
			Vec3(372.2171, 87.618034, 146.28065),
			Vec3(370.04565, 112.96298, 151.52301),
			Vec3(373.66376, 126.56388, 142.6933),
			Vec3(371.20038, 141.69897, 148.73532),
			Vec3(375.49658, 165.172, 137.51753),
			Vec3(377.1576, 181.60097, 132.82692),
			Vec3(373.80695, 206.7023, 142.28894),
			Vec3(372.12164, 226.86052, 146.5111),
			Vec3(330.0784, 419.13434, -225.69786),
			Vec3(372.21576, 263.49484, 146.28392),
			Vec3(372.9349, 282.91034, 144.54774),
			Vec3(374.11118, 299.9024, 141.42975),
			Vec3(374.62802, 322.2253, 139.97029),
			Vec3(373.27682, 339.9324, 143.72226),
			Vec3(372.84024, 359.2552, 144.77625),
			Vec3(372.66693, 379.61102, 145.19466),
			Vec3(372.91357, 399.6009, 144.59926),
			Vec3(339.95984, 352.82712, 210.52603),
			Vec3(373.57272, 433.51123, 142.9503),
			Vec3(375.30377, 468.41245, 138.06195),
			Vec3(373.4322, 480.39215, 143.34718),
			Vec3(380.42264, -480.39215, 123.606804),
			Vec3(378.94727, -456.66714, 127.77306),
			Vec3(378.4593, -446.80356, 129.15103),
			Vec3(380.11734, -420.791, 124.46884),
			Vec3(381.36646, -394.2178, 120.420395),
			Vec3(380.17474, -381.515, 124.30672),
			Vec3(379.95358, -365.0235, 124.93142),
			Vec3(379.2087, -348.14728, 127.034775),
			Vec3(379.35165, -321.83484, 126.63108),
			Vec3(380.816, -303.10468, 122.27867),
			Vec3(378.4519, -286.68945, 129.1719),
			Vec3(379.72488, -268.4509, 125.57712),
			Vec3(381.62775, -242.01404, 119.53847),
			Vec3(381.30795, -223.76741, 120.61794),
			Vec3(382.14172, -214.12341, 117.8032),
			Vec3(380.3637, -187.83308, 123.773224),
			Vec3(380.91815, -167.97804, 121.9339),
			Vec3(378.54022, -152.81859, 128.92249),
			Vec3(381.532, -128.90997, 119.861534),
			Vec3(378.71732, -105.418335, 128.4224),
			Vec3(379.32495, -88.710335, 126.706474),
			Vec3(380.6847, -72.611015, 122.72206),
			Vec3(380.98206, -46.4245, 121.71813),
			Vec3(378.91547, -28.099808, 127.862816),
			Vec3(382.64005, -15.380541, 116.12094),
			Vec3(382.77838, 6.1890774, 115.65387),
			Vec3(380.81314, 34.035954, 122.28837),
			Vec3(379.63275, 49.398773, 125.837326),
			Vec3(380.56155, 68.94466, 123.137695),
			Vec3(378.17215, 85.331375, 129.9619),
			Vec3(381.43842, 99.30733, 120.17765),
			Vec3(378.31024, 135.24457, 129.57195),
			Vec3(377.36392, 148.32574, 132.24426),
			Vec3(381.01578, 169.21767, 121.60427),
			Vec3(382.42264, 185.88297, 116.85486),
			Vec3(379.9179, 213.43813, 125.032036),
			Vec3(376.21567, 225.0762, 135.48686),
			Vec3(379.66, 241.7132, 125.76043),
			Vec3(378.12848, 266.98544, 130.0853),
			Vec3(382.59845, 276.88654, 116.261284),
			Vec3(379.88275, 302.00476, 125.13142),
			Vec3(380.25818, 321.42734, 124.07111),
			Vec3(380.14206, 342.6026, 124.39907),
			Vec3(379.5972, 361.6113, 125.93768),
			Vec3(378.4367, 379.16364, 129.21487),
			Vec3(304.9597, -194.84862, -258.63464),
			Vec3(380.7539, 418.05942, 122.488464),
			Vec3(380.37878, 435.8399, 123.73053),
			Vec3(380.82047, 462.90677, 122.26367),
			Vec3(380.42264, 480.39215, 123.60681),
			Vec3(386.37036, -480.39215, 103.527596),
			Vec3(386.52313, -459.0881, 102.89115),
			Vec3(388.1924, -441.96548, 95.938126),
			Vec3(385.10687, -418.49902, 107.79295),
			Vec3(383.86002, -397.80942, 112.002304),
			Vec3(385.63992, -381.51428, 105.99344),
			Vec3(387.39117, -365.3732, 99.275665),
			Vec3(384.21704, -341.1482, 110.79701),
			Vec3(384.34598, -323.29358, 110.361855),
			Vec3(385.91565, -306.15338, 105.062744),
			Vec3(388.11316, -291.5132, 96.26823),
			Vec3(388.60394, -264.2506, 94.22412),
			Vec3(386.92126, -244.66324, 101.232834),
			Vec3(-399.24756, 432.5064, 23.529991),
			Vec3(387.1797, -204.73227, 100.15641),
			Vec3(385.25214, -189.24263, 107.30258),
			Vec3(385.76035, -169.24242, 105.58694),
			Vec3(386.17834, -149.13547, 104.17571),
			Vec3(386.38382, -128.92068, 103.47141),
			Vec3(384.16205, -94.30958, 110.982704),
			Vec3(386.5739, -88.74115, 102.67982),
			Vec3(387.7885, -71.85267, 97.62054),
			Vec3(385.3518, -47.975964, 106.9662),
			Vec3(388.25635, -32.830368, 95.67195),
			Vec3(389.35382, -15.599218, 91.10054),
			Vec3(387.02435, 10.701471, 100.803604),
			Vec3(386.11893, 30.800303, 104.37631),
			Vec3(386.61496, 48.101498, 102.508835),
			Vec3(385.52167, 67.88393, 106.39271),
			Vec3(383.761, 93.41525, 112.33664),
			Vec3(386.53607, 106.80877, 102.83739),
			Vec3(385.08368, 123.07422, 107.871315),
			Vec3(387.71487, 147.77905, 97.92721),
			Vec3(388.6711, 159.14554, 93.94423),
			Vec3(387.23047, 185.95218, 99.944984),
			Vec3(386.5005, 201.08603, 102.98564),
			Vec3(387.70166, 220.31287, 97.9824),
			Vec3(385.1634, 244.88593, 107.60223),
			Vec3(386.0785, 254.10272, 104.512856),
			Vec3(-386.47296, 392.9678, 103.100266),
			Vec3(387.84802, 298.44492, 97.37262),
			Vec3(385.71442, 324.1605, 105.74195),
			Vec3(384.58157, 340.97733, 109.566376),
			Vec3(387.52682, 364.99152, 98.71056),
			Vec3(383.289, 377.3413, 113.9301),
			Vec3(384.48013, 407.98312, 109.90879),
			Vec3(386.0876, 413.822, 104.4823),
			Vec3(388.32797, 438.3805, 95.373474),
			Vec3(386.56775, 463.967, 102.70526),
			Vec3(386.37036, 480.39215, 103.527596),
			Vec3(391.25903, -480.39215, 83.1647),
			Vec3(390.4823, -456.30298, 86.400185),
			Vec3(390.8029, -440.53815, 85.06477),
			Vec3(391.4279, -419.77847, 82.25389),
			Vec3(392.46332, -393.29373, 76.6672),
			Vec3(147.37238, 307.13828, -371.76486),
			Vec3(391.3465, -363.04065, 82.69271),
			Vec3(390.719, -332.86893, 85.41417),
			Vec3(390.91687, -323.45474, 84.58993),
			Vec3(-357.62646, 345.04977, 179.03038),
			Vec3(390.8938, -287.6619, 84.68619),
			Vec3(392.1687, -261.83832, 78.25674),
			Vec3(390.6206, -246.8785, 85.823906),
			Vec3(392.40826, -231.55779, 76.96399),
			Vec3(391.26004, -205.5327, 83.15926),
			Vec3(391.50836, -185.83421, 81.81942),
			Vec3(389.84186, -170.26553, 89.06781),
			Vec3(391.98285, -145.41919, 79.25938),
			Vec3(390.36465, -129.61664, 86.89025),
			Vec3(390.38815, -109.84157, 86.79234),
			Vec3(391.19763, -94.14957, 83.4206),
			Vec3(391.64948, -68.46364, 81.05808),
			Vec3(390.2992, -48.618847, 87.16286),
			Vec3(392.77747, -35.0145, 74.97207),
			Vec3(392.78946, -11.987986, 74.90735),
			Vec3(391.2253, 17.39653, 83.30512),
			Vec3(390.60086, 29.030226, 85.90629),
			Vec3(391.1203, 49.670643, 83.742584),
			Vec3(390.30392, 69.861595, 87.14299),
			Vec3(391.8294, 78.91853, 80.08729),
			Vec3(389.87256, 113.29746, 88.939926),
			Vec3(389.39496, 130.77821, 90.92918),
			Vec3(391.54117, 147.9267, 81.642494),
			Vec3(392.3589, 164.25848, 77.23036),
			Vec3(390.98053, 193.66263, 84.32479),
			Vec3(387.37134, 212.08977, 99.35821),
			Vec3(391.98056, 226.86647, 79.27167),
			Vec3(285.5893, -162.8971, -279.94843),
			Vec3(391.46466, 266.128, 82.0554),
			Vec3(390.50122, 273.27667, 86.321396),
			Vec3(-336.63617, 326.16364, 215.94977),
			Vec3(391.8181, 324.29745, 80.1482),
			Vec3(390.84717, 342.3782, 84.880264),
			Vec3(391.38513, 361.83884, 82.48447),
			Vec3(-46.778084, -474.08658, 397.1549),
			Vec3(391.3067, 404.36642, 82.90768),
			Vec3(390.91382, 421.17886, 84.60277),
			Vec3(392.5746, 439.07504, 76.06672),
			Vec3(392.3647, 456.2386, 77.19918),
			Vec3(391.25903, 480.39215, 83.1647),
			Vec3(395.07535, -480.39215, 62.57379),
			Vec3(394.44098, -459.969, 65.99659),
			Vec3(395.99307, -444.2414, 55.603027),
			Vec3(394.93793, -413.63174, 63.31516),
			Vec3(393.75348, -397.67972, 69.705864),
			Vec3(395.00882, -380.9569, 62.93296),
			Vec3(394.51636, -361.16284, 65.589775),
			Vec3(395.64282, -345.19498, 58.263573),
			Vec3(394.79526, -325.16757, 64.08501),
			Vec3(-311.3738, 304.68204, 251.05643),
			Vec3(395.94977, -278.68823, 55.93189),
			Vec3(395.18063, -262.64917, 61.77439),
			Vec3(395.33527, -242.84789, 60.599525),
			Vec3(395.53662, -222.98349, 59.07005),
			Vec3(394.39014, -207.15218, 66.270874),
			Vec3(394.63382, -187.08794, 64.95606),
			Vec3(394.8698, -166.9169, 63.682846),
			Vec3(395.08667, -146.68272, 62.487694),
			Vec3(393.94177, -112.32144, 68.689896),
			Vec3(395.30994, -106.75183, 60.79189),
			Vec3(395.62286, -95.511894, 58.414917),
			Vec3(394.66614, -70.314606, 64.78169),
			Vec3(396.04993, -52.475815, 55.1712),
			Vec3(396.72452, -35.284073, 50.04749),
			Vec3(395.44818, -8.87683, 59.741894),
			Vec3(394.8922, 12.211217, 63.562004),
			Vec3(395.40076, 29.697248, 60.102154),
			Vec3(394.34415, 48.498817, 66.51915),
			Vec3(393.4261, 73.41276, 71.47232),
			Vec3(395.1775, 86.59196, 61.797886),
			Vec3(394.07928, 102.90893, 67.948),
			Vec3(395.97638, 125.80228, 55.73001),
			Vec3(396.6247, 142.14365, 50.80566),
			Vec3(395.1549, 167.01158, 61.969376),
			Vec3(394.47235, 187.58752, 65.827225),
			Vec3(395.517, 203.84108, 59.21914),
			Vec3(394.89325, 223.09488, 63.55635),
			Vec3(393.92615, 242.83319, 68.774315),
			Vec3(394.6695, 271.8353, 64.763565),
			Vec3(395.0992, 284.7899, 62.39257),
		};
	}

	void geometrySpheres()
	{
		CAGE_TESTCASE("spheres");

		{
			CAGE_TESTCASE("distances");

			test(distance(makeLine(Vec3(1, 10, 20), Vec3(1, 10, 25)), Sphere(Vec3(1, 2, 3), 3)), 5);
			test(distance(Sphere(Vec3(1, 2, 3), 3), makeLine(Vec3(1, 10, 20), Vec3(1, 10, 25))), 5);
			test(distance(makeLine(Vec3(1, 10, -20), Vec3(1, 10, 25)), Sphere(Vec3(1, 2, 3), 3)), 5);
			test(distance(makeLine(Vec3(1, 4, -20), Vec3(1, 4, 25)), Sphere(Vec3(1, 2, 3), 3)), 0);

			CAGE_TEST(distance(makeRay(Vec3(1, 10, 20), Vec3(1, 10, 25)), Sphere(Vec3(1, 2, 3), 3)) > 10);
			CAGE_TEST(distance(makeRay(Vec3(1, 10, -20), Vec3(1, 10, -25)), Sphere(Vec3(1, 2, 3), 3)) > 10);
			test(distance(makeRay(Vec3(1, 10, -20), Vec3(1, 10, -15)), Sphere(Vec3(1, 2, 3), 3)), 5);
			test(distance(makeRay(Vec3(1, 4, -20), Vec3(1, 4, 25)), Sphere(Vec3(1, 2, 3), 3)), 0);

			CAGE_TEST(distance(makeSegment(Vec3(1, 10, 20), Vec3(1, 10, 25)), Sphere(Vec3(1, 2, 3), 3)) > 10);
			CAGE_TEST(distance(makeSegment(Vec3(1, 10, -20), Vec3(1, 10, -25)), Sphere(Vec3(1, 2, 3), 3)) > 10);
			CAGE_TEST(distance(makeSegment(Vec3(1, 10, -20), Vec3(1, 10, -15)), Sphere(Vec3(1, 2, 3), 3)) > 5);
			test(distance(makeSegment(Vec3(1, 10, -20), Vec3(1, 10, 25)), Sphere(Vec3(1, 2, 3), 3)), 5);
			test(distance(makeSegment(Vec3(1, 4, -20), Vec3(1, 4, 25)), Sphere(Vec3(1, 2, 3), 3)), 0);
		}

		{
			CAGE_TESTCASE("intersects");

			CAGE_TEST(!intersects(makeLine(Vec3(1, 10, 20), Vec3(1, 10, 25)), Sphere(Vec3(1, 2, 3), 3)));
			CAGE_TEST(!intersects(makeLine(Vec3(1, 10, -20), Vec3(1, 10, 25)), Sphere(Vec3(1, 2, 3), 3)));
			CAGE_TEST(intersects(makeLine(Vec3(1, 4, -20), Vec3(1, 4, 25)), Sphere(Vec3(1, 2, 3), 3)));
			CAGE_TEST(intersects(Sphere(Vec3(1, 2, 3), 3), makeLine(Vec3(1, 4, -20), Vec3(1, 4, 25))));

			CAGE_TEST(!intersects(makeRay(Vec3(1, 10, 20), Vec3(1, 10, 25)), Sphere(Vec3(1, 2, 3), 3)));
			CAGE_TEST(!intersects(makeRay(Vec3(1, 10, -20), Vec3(1, 10, -25)), Sphere(Vec3(1, 2, 3), 3)));
			CAGE_TEST(!intersects(makeRay(Vec3(1, 10, -20), Vec3(1, 10, -15)), Sphere(Vec3(1, 2, 3), 3)));
			CAGE_TEST(intersects(makeRay(Vec3(1, 4, -20), Vec3(1, 4, 25)), Sphere(Vec3(1, 2, 3), 3)));

			CAGE_TEST(!intersects(makeSegment(Vec3(1, 10, 20), Vec3(1, 10, 25)), Sphere(Vec3(1, 2, 3), 3)));
			CAGE_TEST(!intersects(makeSegment(Vec3(1, 10, -20), Vec3(1, 10, -25)), Sphere(Vec3(1, 2, 3), 3)));
			CAGE_TEST(!intersects(makeSegment(Vec3(1, 10, -20), Vec3(1, 10, -15)), Sphere(Vec3(1, 2, 3), 3)));
			CAGE_TEST(!intersects(makeSegment(Vec3(1, 10, -20), Vec3(1, 10, 25)), Sphere(Vec3(1, 2, 3), 3)));
			CAGE_TEST(intersects(makeSegment(Vec3(1, 4, -20), Vec3(1, 4, 25)), Sphere(Vec3(1, 2, 3), 3)));
		}

		{
			CAGE_TESTCASE("intersections");
			// todo
		}

		{
			CAGE_TESTCASE("makeSphere");
			{
				std::array<Vec3, 0> pts = {};
				const Sphere s = makeSphere(pts);
				CAGE_TEST(s.valid());
				test(s.center, Vec3());
				test(s.radius, 0);
			}
			{
				std::array<Vec3, 1> pts = { Vec3(13) };
				const Sphere s = makeSphere(pts);
				CAGE_TEST(s.valid());
				test(s.center, Vec3(13));
				test(s.radius, 0);
			}
			{
				std::array<Vec3, 2> pts = { Vec3(10, 5, 5), Vec3(20, 5, 5) };
				const Sphere s = makeSphere(pts);
				CAGE_TEST(s.valid());
				test(s.center, Vec3(15, 5, 5));
				test(s.radius, 5);
			}
			{
				std::vector<Vec3> pts;
				pts.reserve(1000);
				for (uint32 i = 0; i < 1000; i++)
				{
					for (uint32 j = 0; j < 10; j++)
						pts.push_back(randomChance3() * 100);
					const Sphere s = makeSphere(pts);
					CAGE_TEST(s.valid());
					if ((i % 10) == 0)
						pts.clear();
				}
			}
			{
				const Sphere s = makeSphere(aLotOfPoints);
				CAGE_TEST(s.valid());
				CAGE_TEST(s.radius > 100);
			}
		}
	}

	void geometryAabb()
	{
		CAGE_TESTCASE("aabb");

		{
			CAGE_TESTCASE("ctors, isEmpty, volume, addition");
			Aabb a;
			CAGE_TEST(a.empty());
			test(a.volume(), 0);
			Aabb b(Vec3(1, 5, 3));
			CAGE_TEST(!b.empty());
			test(b.volume(), 0);
			Aabb c(Vec3(1, -1, 1), Vec3(-1, 1, -1));
			CAGE_TEST(!c.empty());
			test(c.volume(), 8);
			Aabb d = a + b;
			CAGE_TEST(!d.empty());
			test(d.volume(), 0);
			Aabb e = b + a;
			CAGE_TEST(!e.empty());
			test(e.volume(), 0);
			Aabb f = a + c;
			CAGE_TEST(!f.empty());
			test(f.volume(), 8);
			Aabb g = c + a;
			CAGE_TEST(!g.empty());
			test(g.volume(), 8);
			Aabb h = c + b;
			CAGE_TEST(!h.empty());
			test(h.volume(), 48);
			CAGE_TEST(Aabb::Universe().diagonal() > 100);
			CAGE_TEST(Aabb::Universe().diagonal() == Real::Infinity());
		}

		{
			CAGE_TESTCASE("construct from plane");
			const Aabb a = Aabb(Plane(Vec3(123, 456, 789), Vec3(0, 1, 0)));
			testEx(a.a, Vec3(-Real::Infinity(), 456, -Real::Infinity()));
			testEx(a.b, Vec3(Real::Infinity(), 456, Real::Infinity()));
			const Aabb b = Aabb(Plane(Vec3(123, 456, 789), Vec3(0, 0, -1)));
			testEx(b.a, Vec3(-Real::Infinity(), -Real::Infinity(), 789));
			testEx(b.b, Vec3(Real::Infinity(), Real::Infinity(), 789));
			const Aabb c = Aabb(Plane(Vec3(123, 456, 789), normalize(Vec3(1, 2, -1))));
			testEx(c.a, Vec3(-Real::Infinity()));
			testEx(c.b, Vec3(Real::Infinity()));
		}

		{
			CAGE_TESTCASE("intersects, intersections (with aabb)");
			const Aabb a(Vec3(-5, -6, -3), Vec3(-4, -4, -1));
			const Aabb b(Vec3(1, 3, 4), Vec3(4, 7, 8));
			const Aabb c(Vec3(-10, -10, -10), Vec3());
			const Aabb d(Vec3(), Vec3(10, 10, 10));
			const Aabb e(Vec3(-5, -5, -5), Vec3(5, 5, 5));
			CAGE_TEST(!intersects(a, b));
			CAGE_TEST(intersection(a, b).empty());
			CAGE_TEST(intersects(c, d));
			CAGE_TEST(!intersection(c, d).empty());
			test(intersection(c, d), Aabb(Vec3()));
			CAGE_TEST(intersects(a, c));
			CAGE_TEST(intersects(b, d));
			test(intersection(a, c), a);
			test(intersection(b, d), b);
			CAGE_TEST(intersects(a, e));
			CAGE_TEST(intersects(b, e));
			CAGE_TEST(intersects(c, e));
			CAGE_TEST(intersects(d, e));
			CAGE_TEST(intersects(e, e));
			test(intersection(a, e), Aabb(Vec3(-5, -5, -3), Vec3(-4, -4, -1)));
			test(intersection(b, e), Aabb(Vec3(1, 3, 4), Vec3(4, 5, 5)));
			test(intersection(c, e), Aabb(Vec3(-5, -5, -5), Vec3()));
			test(intersection(d, e), Aabb(Vec3(5, 5, 5), Vec3()));
			test(intersection(e, e), e);
			test(distance(c, d), 0);
			test(distance(a, b), distance(a.b, b.a));
		}

		{
			CAGE_TESTCASE("ray test");
			const Aabb a(Vec3(-5, -6, -3), Vec3(-4, -4, -1));
			CAGE_TEST(intersects(makeSegment(Vec3(-4, -4, -10), Vec3(-5, -5, 10)), a));
			CAGE_TEST(intersects(a, makeSegment(Vec3(-4, -4, -10), Vec3(-5, -5, 10))));
			CAGE_TEST(intersects(makeSegment(Vec3(-10, -12, -6), Vec3(-5, -6, -2)), a));
			CAGE_TEST(!intersects(makeSegment(Vec3(-4, -4, -10), Vec3(-5, -5, -5)), a));
			CAGE_TEST(!intersects(makeSegment(Vec3(-5, -5, -5), Vec3(-4, -4, -5)), a));
		}

		{
			CAGE_TESTCASE("distance to point");
			const Aabb a(Vec3(1, 3, 4), Vec3(4, 7, 8));
			test(distance(a, Vec3(0, 0, 0)), length(Vec3(1, 3, 4)));
			test(distance(a, Vec3(2, 7, 6)), 0);
			test(distance(a, Vec3(3, 3, 10)), 2);
			test(distance(Vec3(3, 3, 10), a), 2);
		}

		{
			CAGE_TESTCASE("transformation");
			const Aabb a(Vec3(-5, -6, -3), Vec3(-4, -4, -1));
			const Aabb b(Vec3(1, 3, 4), Vec3(4, 7, 8));
			const Aabb c(Vec3(-10, -10, -10), Vec3());
			const Aabb d(Vec3(), Vec3(10, 10, 10));
			const Aabb e(Vec3(-5, -5, -5), Vec3(5, 5, 5));
			const Mat4 rot1(Quat(Degs(30), Degs(), Degs()));
			const Mat4 rot2(Quat(Degs(), Degs(315), Degs()));
			const Mat4 tran(Vec3(0, 10, 0));
			const Mat4 scl = Mat4::scale(3);
			CAGE_TEST((a * rot1).volume() > a.volume());
			CAGE_TEST((a * rot1 * rot2).volume() > a.volume());
			CAGE_TEST((a * scl).volume() > a.volume());
			test((a * tran).volume(), a.volume());
		}

		{
			CAGE_TESTCASE("triangle-aabb intersects");
			{
				const Aabb box(Vec3(5, 3, 8), Vec3(12, 9, 10));
				CAGE_TEST(intersects(Triangle(Vec3(6, 7, 8), Vec3(11, 3, 8), Vec3(11, 9, 10)), box)); // Triangle fully inside
				CAGE_TEST(intersects(box, Triangle(Vec3(6, 7, 8), Vec3(11, 3, 8), Vec3(11, 9, 10)))); // Triangle fully inside
				CAGE_TEST(!intersects(Triangle(Vec3(-6, 7, 8), Vec3(-11, 3, 8), Vec3(-11, 9, 10)), box)); // Triangle fully outside
			}
			{ // triangles with all vertices outside
				const Aabb box(Vec3(0, 0, 0), Vec3(2, 2, 2));
				CAGE_TEST(intersects(Triangle(Vec3(-1, -1, 1), Vec3(3, -1, 1), Vec3(1, 3, 1)), box)); // Plane cut
				CAGE_TEST(intersects(Triangle(Vec3(0, -1, 1), Vec3(3, -1, 1), Vec3(3, 2, 1)), box)); // one edge
				CAGE_TEST(intersects(Triangle(Vec3(0, 0, 5), Vec3(0, 5, 0), Vec3(5, 0, 0)), box)); // cut a corner
				CAGE_TEST(intersects(Triangle(Vec3(-5, 1, 1), Vec3(5, 1, 1), Vec3(5, 1, 3)), box)); // needle
			}
		}

		{
			CAGE_TESTCASE("plane-aabb intersects");
			const Aabb box(Vec3(-5, -5, -5), Vec3(5, 5, 5));
			const Plane a(Vec3(1, 2, 3), Vec3(0, 0, 1));
			const Plane b(Vec3(1, 2, 13), Vec3(0, 0, 1));
			const Plane c(Vec3(1, 42, 3), Vec3(0, 0, 1));
			CAGE_TEST(intersects(box, a));
			CAGE_TEST(!intersects(box, b));
			CAGE_TEST(intersects(box, c));
		}
	}

	void geometryFrustum()
	{
		CAGE_TESTCASE("frustum");

		{
			CAGE_TESTCASE("convert perspective frustum to box/sphere");
			const Mat4 proj = perspectiveProjection(Degs(90), 1, 10, 20);
			const Frustum frustum = Frustum(Transform(Vec3(13, 42, 5), Quat(Degs(), Degs(180), Degs())), proj);
			const Aabb box = Aabb(frustum);
			test(box, Aabb(Vec3(-7, 22, 15), Vec3(33, 62, 25)));
			const Sphere sphere = Sphere(frustum);
			test(sphere, Sphere(Vec3(13, 42, 25), sqrt(sqr(20) * 2)));
		}

		{
			CAGE_TESTCASE("convert orthographic frustum to box/sphere");
			const Mat4 proj = orthographicProjection(42, 62, 13, 23, 10, 20);
			const Frustum frustum = Frustum(Transform(Vec3(5)), proj);
			const Aabb box = Aabb(frustum);
			test(box, Aabb(Vec3(47, 18, -15), Vec3(67, 28, -5)));
			const Sphere sphere = Sphere(frustum);
			test(sphere, Sphere(box)); // in this case (the frustum is axis aligned) the sphere should be the same when constructed from the frustum as from the box
		}

		{
			CAGE_TESTCASE("point-frustum intersections");
			const Mat4 proj = perspectiveProjection(Degs(90), 1, 10, 20);
			const Frustum frustum = Frustum(Transform(Vec3(13, 42, 5), Quat(Degs(), Degs(180), Degs())), proj);
			CAGE_TEST(intersects(frustum, Vec3(5, 40, 20)));
			CAGE_TEST(intersects(Vec3(5, 40, 20), frustum));
			CAGE_TEST(!intersects(frustum, Vec3(5, 40, 10)));
			CAGE_TEST(!intersects(frustum, Vec3(5, 40, 30)));
			CAGE_TEST(!intersects(frustum, Vec3(-10, 40, 20)));
			CAGE_TEST(!intersects(frustum, Vec3(30, 40, 20)));
			CAGE_TEST(!intersects(frustum, Vec3(5, 20, 20)));
			CAGE_TEST(!intersects(frustum, Vec3(5, 70, 20)));
		}

		{
			CAGE_TESTCASE("aabb-frustum intersections");
			const Aabb a(Vec3(1, 1, -7), Vec3(3, 5, -1));
			const Mat4 proj = perspectiveProjection(Degs(90), 1, 2, 10);
			// frustum moved back and forth
			CAGE_TEST(intersects(a, Frustum(Transform(Vec3(2, 3, -10)), proj)) == false);
			CAGE_TEST(intersects(a, Frustum(Transform(Vec3(2, 3, -5)), proj)) == true);
			CAGE_TEST(intersects(a, Frustum(Transform(Vec3(2, 3, 0)), proj)) == true);
			CAGE_TEST(intersects(a, Frustum(Transform(Vec3(2, 3, 3)), proj)) == true);
			CAGE_TEST(intersects(a, Frustum(Transform(Vec3(2, 3, 10)), proj)) == false);
			// frustum moved left and right
			CAGE_TEST(intersects(a, Frustum(Transform(Vec3(-10, 3, 0)), proj)) == false);
			CAGE_TEST(intersects(a, Frustum(Transform(Vec3(0, 3, 0)), proj)) == true);
			CAGE_TEST(intersects(a, Frustum(Transform(Vec3(5, 3, 0)), proj)) == true);
			CAGE_TEST(intersects(a, Frustum(Transform(Vec3(15, 3, 0)), proj)) == false);
		}
	}

	void geometryMisc()
	{
		{
			CAGE_TESTCASE("stringize");
			const String s = detail::StringizerBase<5432>() + makeSegment(Vec3(1, 2, 3), Vec3(4, 5, 6)) + ", " + Triangle() + ", " + Plane() + ", " + Sphere() + ", " + Aabb() + ", " + Cone() + ", " + Frustum();
		}

		{
			CAGE_TESTCASE("angle quat");
			test(angle(Quat(), Quat()), Degs());
			test(angle(Quat(), Quat(Vec3(1, 0, 0), Vec3(0, 1, 0))), Degs(90));
		}
	}
}

void testGeometry()
{
	CAGE_TESTCASE("geometry");
	geometryPoints();
	geometryLines();
	geometryTriangles();
	geometryPlanes();
	geometrySpheres();
	geometryAabb();
	geometryFrustum();
	geometryMisc();
}
