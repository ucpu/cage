cmake_minimum_required(VERSION 3.22)

# make cmake find our own provided libraries
# the libraries provided here have higher priority than system libraries
set(CAGE_EXTERNALS_MODULE_PATH "${CMAKE_CURRENT_BINARY_DIR}/cmake-modules")
set(CAGE_EXTERNALS_MODULE_PATH "${CAGE_EXTERNALS_MODULE_PATH}" PARENT_SCOPE)
list(INSERT CMAKE_MODULE_PATH 0 "${CAGE_EXTERNALS_MODULE_PATH}")
include(cage_gen_module.cmake)

# disable some find_package
set(CMAKE_DISABLE_FIND_PACKAGE_PkgConfig ON)
set(CMAKE_DISABLE_FIND_PACKAGE_OpenGL ON)
set(CMAKE_DISABLE_FIND_PACKAGE_SndFile ON)
set(CMAKE_DISABLE_FIND_PACKAGE_FFTW3 ON)
set(CMAKE_DISABLE_FIND_PACKAGE_Fontconfig ON)
set(CMAKE_DISABLE_FIND_PACKAGE_PythonInterp ON)
set(CMAKE_DISABLE_FIND_PACKAGE_BZip2 ON)
set(CMAKE_DISABLE_FIND_PACKAGE_PNG ON)
set(CMAKE_DISABLE_FIND_PACKAGE_HarfBuzz ON)
set(CMAKE_DISABLE_FIND_PACKAGE_BrotliDec ON)

# ensure that all libraries are distinguishable from system libraries
set(CMAKE_STATIC_LIBRARY_PREFIX "${CMAKE_STATIC_LIBRARY_PREFIX}cage-")
set(CMAKE_IMPORT_LIBRARY_PREFIX "${CMAKE_IMPORT_LIBRARY_PREFIX}cage-")
set(CMAKE_SHARED_LIBRARY_PREFIX "${CMAKE_SHARED_LIBRARY_PREFIX}cage-")
set(CMAKE_SHARED_MODULE_PREFIX "${CMAKE_SHARED_MODULE_PREFIX}cage-")

# no compilation warnings level
if(MSVC)
	foreach(conf IN ITEMS ${CMAKE_CONFIGURATION_TYPES} ${CMAKE_BUILD_TYPE})
		string(TOUPPER ${conf} conf_upper)
		string(REGEX REPLACE "/W[0-9]" "" CMAKE_C_FLAGS_${conf_upper} ${CMAKE_C_FLAGS_${conf_upper}})
		string(REGEX REPLACE "/W[0-9]" "" CMAKE_CXX_FLAGS_${conf_upper} ${CMAKE_CXX_FLAGS_${conf_upper}})
	endforeach(conf)
	string(REGEX REPLACE "/W[0-9]" "" CMAKE_C_FLAGS ${CMAKE_C_FLAGS})
	string(REGEX REPLACE "/W[0-9]" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
endif()

message(STATUS "----------------------------------------------------------------")
message(STATUS "starting cage external subdirectories")
message(STATUS "----------------------------------------------------------------")

add_subdirectory(zlib-ng)
add_subdirectory(png)
add_subdirectory(jpeg) # jpeg must go after libpng to ensure that asm compiler is detected and before zstd to ensure that no uninstall target is yet defined
add_subdirectory(zstd)
add_subdirectory(tiff)
add_subdirectory(freetype)
add_subdirectory(assimp)
add_subdirectory(glad)
add_subdirectory(glm)
add_subdirectory(glfw)
add_subdirectory(cubeb)
add_subdirectory(dr_libs)
add_subdirectory(ogg)
add_subdirectory(vorbis)
add_subdirectory(utfcpp)
add_subdirectory(simplefilewatcher)
add_subdirectory(msdfgen)
add_subdirectory(fastnoise)
add_subdirectory(unordered_dense)
add_subdirectory(hsluv)
add_subdirectory(stb)
add_subdirectory(xatlas)
add_subdirectory(pmp)
add_subdirectory(dualmc)
add_subdirectory(plf)
add_subdirectory(tinyexr)
add_subdirectory(samplerate)
add_subdirectory(bc7enc_rdo)
add_subdirectory(avir)
add_subdirectory(openxr-sdk)

message(STATUS "----------------------------------------------------------------")
message(STATUS "finished cage external subdirectories")
message(STATUS "----------------------------------------------------------------")

add_dependencies(png_static zlib)
add_dependencies(jpeg-static zlib)
add_dependencies(tiff jpeg-static)
add_dependencies(freetype png_static)
add_dependencies(vorbis ogg)
add_dependencies(lib_msdfgen freetype)

function(disable_compilation_warnings target)
	if(NOT TARGET ${target})
		return()
	endif()
	if(MSVC)
		get_target_property(v ${target} COMPILE_FLAGS)
		if(v)
			string(REGEX REPLACE "/W[0-9]" "" v "${v}")
			set_target_properties(${target} PROPERTIES COMPILE_FLAGS "${v}")
		endif()
		get_target_property(v ${target} COMPILE_OPTIONS)
		if(v)
			list(FILTER v EXCLUDE REGEX "/W[0-9]")
			set_target_properties(${target} PROPERTIES COMPILE_OPTIONS "${v}")
		endif()
		target_compile_options(${target} PRIVATE "/W0")
	else()
		target_compile_options(${target} PRIVATE "-w")
	endif()
endfunction()

function(external_target_folder target)
	if(TARGET ${target})
		set_target_properties(${target} PROPERTIES FOLDER cage/externals)
	endif()
endfunction()

function(external_target_properties target)
	disable_compilation_warnings(${target})
	external_target_folder(${target})
endfunction()

external_target_properties(zlib)
external_target_properties(libzstd_static)
external_target_properties(png_static)
external_target_folder(png_genfiles)
external_target_folder(jpeg-static)
external_target_folder(simd)
external_target_folder(simd-objs)
external_target_properties(tiff)
external_target_properties(tiffxx)
external_target_properties(freetype)
external_target_properties(assimp)
external_target_properties(IrrXML)
external_target_properties(glad)
external_target_properties(glfw)
external_target_properties(cubeb)
external_target_properties(dr_libs)
external_target_properties(ogg)
external_target_properties(vorbis)
external_target_properties(vorbisenc)
external_target_properties(vorbisfile)
external_target_properties(simplefilewatcher)
external_target_properties(lib_msdfgen)
external_target_properties(fastnoise)
external_target_properties(hsluv)
external_target_properties(stb)
external_target_properties(xatlas)
external_target_properties(pmp)
external_target_properties(dualmc)
external_target_properties(tinyexr)
external_target_properties(samplerate)
external_target_properties(bc7enc_rdo)
external_target_properties(avir)
external_target_properties(openxr_loader)
external_target_folder(generate_openxr_header)
external_target_folder(xr_global_generated_files)

