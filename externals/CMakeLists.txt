
# override cmake minimum version for dependencies
set(CMAKE_POLICY_VERSION_MINIMUM 3.31)

# make cmake find our own provided libraries
# the libraries provided here have higher priority than system libraries
set(CAGE_EXTERNALS_MODULE_PATH "${CMAKE_CURRENT_BINARY_DIR}/cmake-modules")
set(CAGE_EXTERNALS_MODULE_PATH "${CAGE_EXTERNALS_MODULE_PATH}" PARENT_SCOPE)
list(INSERT CMAKE_MODULE_PATH 0 "${CAGE_EXTERNALS_MODULE_PATH}")
include(cage_gen_module.cmake)

# disable some find_package
set(CMAKE_DISABLE_FIND_PACKAGE_BZip2 ON)
set(CMAKE_DISABLE_FIND_PACKAGE_Brotli ON)
set(CMAKE_DISABLE_FIND_PACKAGE_BrotliDec ON)
set(CMAKE_DISABLE_FIND_PACKAGE_Deflate ON)
set(CMAKE_DISABLE_FIND_PACKAGE_Doxygen ON)
set(CMAKE_DISABLE_FIND_PACKAGE_FFTW3 ON)
set(CMAKE_DISABLE_FIND_PACKAGE_Fontconfig ON)
set(CMAKE_DISABLE_FIND_PACKAGE_HarfBuzz ON)
set(CMAKE_DISABLE_FIND_PACKAGE_JBIG ON)
set(CMAKE_DISABLE_FIND_PACKAGE_JsonCpp ON)
set(CMAKE_DISABLE_FIND_PACKAGE_Libidn2 ON)
set(CMAKE_DISABLE_FIND_PACKAGE_Libpsl ON)
set(CMAKE_DISABLE_FIND_PACKAGE_Libssh2 ON)
set(CMAKE_DISABLE_FIND_PACKAGE_NGHTTP2 ON)
set(CMAKE_DISABLE_FIND_PACKAGE_OpenGL ON)
set(CMAKE_DISABLE_FIND_PACKAGE_PNG ON)
set(CMAKE_DISABLE_FIND_PACKAGE_Perl ON)
set(CMAKE_DISABLE_FIND_PACKAGE_PkgConfig ON)
set(CMAKE_DISABLE_FIND_PACKAGE_Python3 ON)
set(CMAKE_DISABLE_FIND_PACKAGE_PythonInterp ON)
set(CMAKE_DISABLE_FIND_PACKAGE_SndFile ON)
set(CMAKE_DISABLE_FIND_PACKAGE_Vulkan ON)
set(CMAKE_DISABLE_FIND_PACKAGE_VulkanHeaders ON)
set(CMAKE_DISABLE_FIND_PACKAGE_glslc ON)
set(CMAKE_DISABLE_FIND_PACKAGE_liblzma ON)

# speed up repeated cmake runs
set(FETCHCONTENT_UPDATES_DISCONNECTED ON)

# disable installs
set(CMAKE_SKIP_INSTALL_RULES TRUE) # this is the most awesome addition to cmake ever!

# ensure that all libraries are distinguishable from system libraries
set(CMAKE_STATIC_LIBRARY_PREFIX "${CMAKE_STATIC_LIBRARY_PREFIX}cage-")
set(CMAKE_IMPORT_LIBRARY_PREFIX "${CMAKE_IMPORT_LIBRARY_PREFIX}cage-")
set(CMAKE_SHARED_LIBRARY_PREFIX "${CMAKE_SHARED_LIBRARY_PREFIX}cage-")
set(CMAKE_SHARED_MODULE_PREFIX "${CMAKE_SHARED_MODULE_PREFIX}cage-")

# no compilation warnings level
if(MSVC)
	foreach(conf IN ITEMS ${CMAKE_CONFIGURATION_TYPES} ${CMAKE_BUILD_TYPE})
		string(TOUPPER ${conf} conf_upper)
		string(REGEX REPLACE "/W[0-9]" "" CMAKE_C_FLAGS_${conf_upper} ${CMAKE_C_FLAGS_${conf_upper}})
		string(REGEX REPLACE "/W[0-9]" "" CMAKE_CXX_FLAGS_${conf_upper} ${CMAKE_CXX_FLAGS_${conf_upper}})
	endforeach(conf)
	string(REGEX REPLACE "/W[0-9]" "" CMAKE_C_FLAGS ${CMAKE_C_FLAGS})
	string(REGEX REPLACE "/W[0-9]" "" CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})
endif()

option(cage_use_steam_sockets "include Game Networking Sockets library by Valve/Steam" OFF)

message(STATUS "----------------------------------------------------------------")
message(STATUS "starting cage external subdirectories")
message(STATUS "----------------------------------------------------------------")

add_subdirectory(zlib-ng)
add_subdirectory(png)
add_subdirectory(jpeg) # jpeg must go after libpng to ensure that asm compiler is detected and before zstd to ensure that no uninstall target is yet defined
add_subdirectory(zstd)
add_subdirectory(tiff)
add_subdirectory(tinyexr)
add_subdirectory(bc7enc_rdo)
add_subdirectory(avir)
add_subdirectory(hsluv)

add_subdirectory(cubeb)
add_subdirectory(dr_libs)
add_subdirectory(ogg)
add_subdirectory(samplerate)
add_subdirectory(vorbis)

add_subdirectory(assimp)
add_subdirectory(dualmc)
add_subdirectory(pmp)
add_subdirectory(quickhull)
add_subdirectory(xatlas)

add_subdirectory(freetype)
add_subdirectory(harfbuzz)
add_subdirectory(msdfgen)
add_subdirectory(sheenbidi)
add_subdirectory(uni-algo)

add_subdirectory(mbedtls)
add_subdirectory(curl)
add_subdirectory(cpr)

add_subdirectory(fastnoise)
add_subdirectory(glfw)
add_subdirectory(glm)
add_subdirectory(plf)
add_subdirectory(simplefilewatcher)
add_subdirectory(stb)
add_subdirectory(unordered_dense)
add_subdirectory(wamr)

add_subdirectory(dawn)
add_subdirectory(glslang)
add_subdirectory(openxr-sdk)

if(cage_use_steam_sockets)
	add_subdirectory(gamenetworkingsockets) # uses protobuf from dawn
endif()

message(STATUS "----------------------------------------------------------------")
message(STATUS "finished cage external subdirectories")
message(STATUS "----------------------------------------------------------------")

add_dependencies(libcurl_static mbedtls)
add_dependencies(freetype png_static)
add_dependencies(jpeg-static zlib)
add_dependencies(lib_msdfgen freetype)
add_dependencies(png_static zlib)
add_dependencies(tiff jpeg-static)
add_dependencies(vorbis ogg)

function(external_target_properties target)
	if(NOT TARGET ${target})
		return()
	endif()
	set_target_properties(${target} PROPERTIES FOLDER cage/externals)
	get_target_property(imported ${target} IMPORTED)
	get_target_property(target_type ${target} TYPE)
	if(imported OR target_type STREQUAL "INTERFACE_LIBRARY" OR target_type STREQUAL "UTILITY")
		return()
	endif()
	if(MSVC)
		get_target_property(v ${target} COMPILE_FLAGS)
		if(v)
			string(REGEX REPLACE "/W[0-9]" "" v "${v}")
			set_target_properties(${target} PROPERTIES COMPILE_FLAGS "${v}")
		endif()
		get_target_property(v ${target} COMPILE_OPTIONS)
		if(v)
			list(FILTER v EXCLUDE REGEX "/W[0-9]")
			set_target_properties(${target} PROPERTIES COMPILE_OPTIONS "${v}")
		endif()
		target_compile_options(${target} PRIVATE "/W0")
	else()
		target_compile_options(${target} PRIVATE "-w")
	endif()
endfunction()

cage_list_all_targets(all_targets ${CMAKE_CURRENT_LIST_DIR})
foreach(target IN ITEMS ${all_targets})
	external_target_properties(${target})
endforeach(target)
