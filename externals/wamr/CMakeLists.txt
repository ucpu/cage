cmake_minimum_required(VERSION 3.22)

message(STATUS "----------------------------------------------------------------")
message(STATUS "wamr")
message(STATUS "----------------------------------------------------------------")

if(NOT CMAKE_BUILD_TYPE)
	set(CMAKE_BUILD_TYPE Release)
endif()
string(TOLOWER ${CMAKE_HOST_SYSTEM_NAME} WAMR_BUILD_PLATFORM)
set(WAMR_BH_LOG cage_wamr_log)
set(WAMR_BH_VPRINTF cage_wamr_vprintf)
set(WAMR_BUILD_AOT 1)
set(WAMR_BUILD_BULK_MEMORY 1)
set(WAMR_BUILD_DEBUG_INTERP 0)
set(WAMR_BUILD_DUMP_CALL_STACK 1)
set(WAMR_BUILD_FAST_INTERP 1)
set(WAMR_BUILD_FAST_JIT 0)
set(WAMR_BUILD_GLOBAL_HEAP_POOL 0)
set(WAMR_BUILD_INTERP 1)
set(WAMR_BUILD_JIT 0)
set(WAMR_BUILD_LIBC_BUILTIN 1)
set(WAMR_BUILD_LIBC_UVWASI 0)
set(WAMR_BUILD_LIBC_WASI 0)
set(WAMR_BUILD_LIB_PTHREAD 0)
set(WAMR_BUILD_LIB_PTHREAD_SEMAPHORE 0)
set(WAMR_BUILD_LIB_WASI_THREADS 0)
set(WAMR_BUILD_MINI_LOADER 0)
set(WAMR_BUILD_MODULE_INST_CONTEXT 0)
set(WAMR_BUILD_MULTI_MODULE 0)
set(WAMR_BUILD_REF_TYPES 1)
set(WAMR_BUILD_SHARED_MEMORY 0)
set(WAMR_BUILD_SIMD 1)
set(WAMR_BUILD_TAIL_CALL 1)
set(WAMR_BUILD_THREAD_MGR 0)
set(WAMR_BUILD_WASI_NN 0)
set(WAMR_DISABLE_APP_ENTRY 1)
set(WAMR_DISABLE_HW_BOUND_CHECK 0)
set(WAMR_DISABLE_STACK_HW_BOUND_CHECK 0)
set(WAMR_DISABLE_WAKEUP_BLOCKING_OP 0)
add_compile_definitions(BUILTIN_LIBC_BUFFERED_PRINTF=1 BUILTIN_LIBC_BUFFERED_PRINT_SIZE=512)
add_compile_definitions("$<$<CONFIG:Debug>:BH_DEBUG=1>")

include("${CMAKE_CURRENT_LIST_DIR}/wamr/build-scripts/runtime_lib.cmake")

file(GLOB_RECURSE iwasm_headers "${CMAKE_CURRENT_LIST_DIR}/wamr/core/*.h")
add_library(iwasm_static STATIC ${WAMR_RUNTIME_LIB_SOURCE} ${iwasm_headers})
target_include_directories(iwasm_static INTERFACE "wamr/core/iwasm/include")
target_compile_definitions(iwasm_static PUBLIC WASM_RUNTIME_API_EXTERN= WASM_API_EXTERN= COMPILING_WASM_RUNTIME_API=1)

if(MSVC)
	list(FILTER WAMR_RUNTIME_LIB_SOURCE INCLUDE REGEX "asm$")
	set_source_files_properties(${WAMR_RUNTIME_LIB_SOURCE} PROPERTIES LANGUAGE ASM_MASM)
	if(CMAKE_SIZEOF_VOID_P EQUAL 4)
		set(CMAKE_ASM_MASM_FLAGS "${CMAKE_ASM_MASM_FLAGS} /safeseh")
	endif()
endif()

if(WAMR_DISABLE_STACK_OVERFLOW_CHECK)
	message(STATUS "disabling stack overflow detection")
	set(file "${CMAKE_CURRENT_LIST_DIR}/wamr/core/shared/platform/common/posix/posix_thread.c")
	set(flags "-Dos_thread_get_stack_boundary=os_thread_get_stack_boundary_original")
	set_source_files_properties(${file} PROPERTIES COMPILE_FLAGS "${flags}")
	target_sources(iwasm_static PRIVATE os_thread_get_stack_boundary_dummy.c)
endif()
